{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetManagerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "distributeClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "distributeReservedRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governorRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "honestConfiguration_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x788A6D6Ec9dfd283810e93D0245e5Da283cfE7f1",
    "contractAddress": "0x6d1bfE76c2A24c06c15ca585f3F755Ac49cfa217",
    "transactionIndex": 27,
    "gasUsed": "1186379",
    "logsBloom": "0x
    "blockHash": "0xed751f400cc9c1b224f5ba4d5f30005ea96d13b8e10f540f657ffcb44dfc95ed",
    "transactionHash": "0x17afadd94ae313f5f43cf74f4023eedbaab1c01884db2bb2fd1bae577b6e6ae3",
    "logs": [],
    "blockNumber": 8915500,
    "cumulativeGasUsed": "2708772",
    "status": 1,
    "byzantium": true
  },
  "address": "0x6d1bfE76c2A24c06c15ca585f3F755Ac49cfa217",
  "args": [],
  "solcInputHash": "0x57f8616e1b9f5e60b5dddddb3a19aaaa55edb00aeb2821c2b44dfb8838d95b70",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetManagerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"distributeClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"distributeReservedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"honestConfiguration_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HonestFee.sol\":\"HonestFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"contracts/AbstractHonestContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {Initializable} from '@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol';\\nimport {AccessControlUpgradeSafe} from '@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol';\\n\\nabstract contract AbstractHonestContract is Initializable, AccessControlUpgradeSafe {\\n\\n    bytes32 private _assetManagerRole;\\n    bytes32 private _vaultRole;\\n    bytes32 private _governorRole;\\n\\n    function initialize() internal initializer() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _assetManagerRole = keccak256(\\\"HONEST_ASSET_MANAGER\\\");\\n        _vaultRole = keccak256(\\\"HONEST_VAULT\\\");\\n        _governorRole = keccak256(\\\"HONEST_GOVERNOR\\\");\\n    }\\n\\n    function assetManagerRole() external view returns (bytes32) {\\n        return _assetManagerRole;\\n    }\\n\\n    function vaultRole() external view returns (bytes32) {\\n        return _vaultRole;\\n    }\\n\\n    function governorRole() external view returns (bytes32) {\\n        return _governorRole;\\n    }\\n\\n    function transferOwnership(address to) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, to);\\n        revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAssetManager {\\n        require(hasRole(_assetManagerRole, msg.sender), \\\"AccessControl: caller is not the AssetManager contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault {\\n        require(hasRole(_vaultRole, msg.sender), \\\"AccessControl: caller is not the Vault contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"AccessControl: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xd7ca371f8f4f7da00029e7634468c9cc6f24314c26b2080387397d3dfab6e66e\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/HonestFee.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {SafeMath} from '@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol';\\nimport {IERC20} from '@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol';\\nimport {IHonestFee} from \\\"./interfaces/IHonestFee.sol\\\";\\nimport {IHonestConfiguration} from \\\"./interfaces/IHonestConfiguration.sol\\\";\\nimport {AbstractHonestContract} from \\\"./AbstractHonestContract.sol\\\";\\n\\ncontract HonestFee is IHonestFee, AbstractHonestContract {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    address private _honestConfiguration;\\n    uint private _claimableRewards;\\n    uint private _reservedRewards;\\n\\n    function initialize(address honestConfiguration_) external initializer() {\\n        require(honestConfiguration_ != address(0), 'HonestFee.initialize: honestConfiguration address must be valid');\\n\\n        super.initialize();\\n        _honestConfiguration = honestConfiguration_;\\n    }\\n\\n    function totalFee() public override view returns (uint) {\\n        address honestAsset = _honestAsset();\\n        return IERC20(honestAsset).balanceOf(address(this));\\n    }\\n\\n    function _claimableRewardsPercentage() internal view returns (uint) {\\n        return IHonestConfiguration(_honestConfiguration).claimableRewardsPercentage();\\n    }\\n\\n    function claimableRewards() public override view returns (uint) {\\n        return _availableRewards().mul(_claimableRewardsPercentage()).div(uint(1e18)).add(_claimableRewards);\\n    }\\n\\n    function reservedRewards() public override view returns (uint) {\\n        uint percentage = uint(1e18).sub(_claimableRewardsPercentage());\\n        return _availableRewards().mul(percentage).div(uint(1e18)).add(_reservedRewards);\\n    }\\n\\n    function distributeClaimableRewards(address account, uint price) external override onlyVault returns (uint) {\\n        require(account != address(0), 'HonestFee.distributeHonestAssetRewards: account must be valid');\\n\\n        uint rewards = claimableRewards();\\n        if (rewards > 0) {\\n            IERC20(_honestAsset()).safeTransfer(account, rewards);\\n            _reservedRewards = _reservedRewards.add(totalFee());\\n            _claimableRewards = 0;\\n        }\\n\\n        return rewards.mul(uint(1e18)).div(price);\\n    }\\n\\n    function distributeReservedRewards(address account) external override onlyOwner {\\n        require(account != address(0), 'HonestFee.distributeReservedRewards: account must be valid');\\n\\n        uint rewards = reservedRewards();\\n        if (rewards > 0) {\\n            IERC20(_honestAsset()).safeTransfer(account, rewards);\\n            _claimableRewards = _claimableRewards.add(totalFee());\\n            _reservedRewards = 0;\\n        }\\n    }\\n\\n    function _honestAsset() internal view returns (address) {\\n        return IHonestConfiguration(_honestConfiguration).honestAsset();\\n    }\\n\\n    function _availableRewards() internal view returns (uint) {\\n        return totalFee().sub(_claimableRewards).sub(_reservedRewards);\\n    }\\n}\",\"keccak256\":\"0xc90bdc8e7813c4545a10f9abb294742b582ccb5e227d1557ff4c068f3ec7b313\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/integrations/IAssetPriceIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\ninterface IAssetPriceIntegration {\\n\\n    enum FeedsTarget {USD, ETH}\\n\\n    function honestConfiguration() external view returns (address);\\n\\n    function ethPriceFeeds() external view returns (address);\\n\\n    function getPrice(address asset) external view returns (uint);\\n\\n    function getPrices(address[] calldata assets) external view returns (uint[] memory);\\n}\",\"keccak256\":\"0xa351ba6b2e7b7a2990f40bc9d9f59fd2ea395006ccb9e55e0fa9776220cf7c05\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/interfaces/IHonestConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {IAssetPriceIntegration} from '../integrations/IAssetPriceIntegration.sol';\\n\\ninterface IHonestConfiguration {\\n\\n    function honestAsset() external view returns (address);\\n\\n    function basketAssets() external view returns (address[] memory, bool[] memory);\\n\\n    function activeBasketAssets() external view returns (address[] memory);\\n\\n    function basketAssetInvestmentIntegration(address asset) external view returns (address);\\n\\n    function swapFeeRate() external view returns (uint);\\n\\n    function redeemFeeRate() external view returns (uint);\\n\\n    function claimableRewardsPercentage() external view returns (uint);\\n\\n    function addBasketAsset(address asset, address bAssetInvestment) external;\\n\\n    function removeBasketAsset(address asset) external;\\n\\n    function activateBasketAsset(address asset) external;\\n\\n    function deactivateBasketAsset(address asset) external;\\n\\n    function setSwapFeeRate(uint feeRate) external;\\n\\n    function setRedeemFeeRate(uint feeRate) external;\\n\\n    function setClaimableRewardsPercentage(uint percentage) external;\\n}\",\"keccak256\":\"0xedc2dffa10254d4d08690346e3a598e5c80c36898c971bfe33835770b9984747\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/interfaces/IHonestFee.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\ninterface IHonestFee {\\n\\n    function totalFee() external view returns (uint);\\n\\n    function claimableRewards() external view returns (uint);\\n\\n    function reservedRewards() external view returns (uint);\\n\\n    function distributeClaimableRewards(address account, uint price) external returns (uint);\\n\\n    function distributeReservedRewards(address account) external;\\n}\",\"keccak256\":\"0x03647a9c5681d0712a493451e0f17f4b37a2f7d98f5c63870966ab05b81c62cb\",\"license\":\"LGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611480806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063a45d7325116100a2578063ce16489e11610071578063ce16489e146102ba578063d547741f146102c2578063eaf896fd146102ee578063eb04a80c146102f6578063f2fde38b1461031c57610116565b8063a45d732514610243578063af5ce1041461026f578063c4d66de814610277578063ca15c8731461029d57610116565b806349dcd6a1116100e957806349dcd6a1146101ac5780636c003a9b146101b45780639010d07c146101bc57806391d14854146101fb578063a217fddf1461023b57610116565b80631df4ccfc1461011b578063248a9ca3146101355780632f2ff15d1461015257806336568abe14610180575b600080fd5b610123610342565b60408051918252519081900360200190f35b6101236004803603602081101561014b57600080fd5b50356103ce565b61017e6004803603604081101561016857600080fd5b50803590602001356001600160a01b03166103e3565b005b61017e6004803603604081101561019657600080fd5b50803590602001356001600160a01b031661044f565b6101236104b0565b6101236104b6565b6101df600480360360408110156101d257600080fd5b50803590602001356104f4565b604080516001600160a01b039092168252519081900360200190f35b6102276004803603604081101561021157600080fd5b50803590602001356001600160a01b0316610515565b604080519115158252519081900360200190f35b61012361052d565b6101236004803603604081101561025957600080fd5b506001600160a01b038135169060200135610532565b61012361062a565b61017e6004803603602081101561028d57600080fd5b50356001600160a01b031661066d565b610123600480360360208110156102b357600080fd5b5035610777565b61012361078e565b61017e600480360360408110156102d857600080fd5b50803590602001356001600160a01b0316610794565b6101236107ed565b61017e6004803603602081101561030c57600080fd5b50356001600160a01b03166107f3565b61017e6004803603602081101561033257600080fd5b50356001600160a01b03166108bd565b60008061034d6108dd565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561039c57600080fd5b505afa1580156103b0573d6000803e3d6000fd5b505050506040513d60208110156103c657600080fd5b505191505090565b60009081526065602052604090206002015490565b60008281526065602052604090206002015461040690610401610953565b610515565b6104415760405162461bcd60e51b815260040180806020018281038252602f815260200180611239602f913960400191505060405180910390fd5b61044b8282610957565b5050565b610457610953565b6001600160a01b0316816001600160a01b0316146104a65760405162461bcd60e51b815260040180806020018281038252602f8152602001806113a3602f913960400191505060405180910390fd5b61044b82826109c0565b60975490565b60006104ef609b546104e9670de0b6b3a76400006104e36104d5610a29565b6104dd610a6e565b90610a8a565b90610ae3565b90610b25565b905090565b600082815260656020526040812061050c9083610b7f565b90505b92915050565b600082815260656020526040812061050c9083610b8b565b600081565b600061054060985433610515565b61057b5760405162461bcd60e51b815260040180806020018281038252602f8152602001806112e7602f913960400191505060405180910390fd5b6001600160a01b0383166105c05760405162461bcd60e51b815260040180806020018281038252603d815260200180611366603d913960400191505060405180910390fd5b60006105ca6104b6565b9050801561060c576105ef84826105df6108dd565b6001600160a01b03169190610ba0565b6106036105fa610342565b609c5490610b25565b609c556000609b555b610622836104e383670de0b6b3a7640000610a8a565b949350505050565b600080610647610638610a29565b670de0b6b3a764000090610bf7565b9050610667609c546104e9670de0b6b3a76400006104e3856104dd610a6e565b91505090565b600054610100900460ff16806106865750610686610c39565b80610694575060005460ff16155b6106cf5760405162461bcd60e51b815260040180806020018281038252602e8152602001806112b9602e913960400191505060405180910390fd5b600054610100900460ff161580156106fa576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03821661073f5760405162461bcd60e51b815260040180806020018281038252603f81526020018061140c603f913960400191505060405180910390fd5b610747610c3f565b609a80546001600160a01b0319166001600160a01b038416179055801561044b576000805461ff00191690555050565b600081815260656020526040812061050f90610d5e565b60995490565b6000828152606560205260409020600201546107b290610401610953565b6104a65760405162461bcd60e51b81526004018080602001828103825260308152602001806112686030913960400191505060405180910390fd5b60985490565b6107fe600033610515565b6108395760405162461bcd60e51b81526004018080602001828103825260268152602001806113406026913960400191505060405180910390fd5b6001600160a01b03811661087e5760405162461bcd60e51b815260040180806020018281038252603a8152602001806113d2603a913960400191505060405180910390fd5b600061088861062a565b9050801561044b5761089d82826105df6108dd565b6108b16108a8610342565b609b5490610b25565b609b556000609c555050565b6108c86000826103e3565b6108da60006108d5610953565b610794565b50565b609a54604080516304367d0960e51b815290516000926001600160a01b0316916386cfa120916004808301926020929190829003018186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d602081101561094c57600080fd5b5051905090565b3390565b600082815260656020526040902061096f9082610d69565b1561044b5761097c610953565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206109d89082610d7e565b1561044b576109e5610953565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b609a54604080516313ef2ded60e11b815290516000926001600160a01b0316916327de5bda916004808301926020929190829003018186803b15801561092257600080fd5b60006104ef609c54610a84609b54610a84610342565b90610bf7565b600082610a995750600061050f565b82820282848281610aa657fe5b041461050c5760405162461bcd60e51b81526004018080602001828103825260218152602001806112986021913960400191505060405180910390fd5b600061050c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d93565b60008282018381101561050c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061050c8383610e35565b600061050c836001600160a01b038416610e99565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bf2908490610eb1565b505050565b600061050c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061106f565b303b1590565b600054610100900460ff1680610c585750610c58610c39565b80610c66575060005460ff16155b610ca15760405162461bcd60e51b815260040180806020018281038252602e8152602001806112b9602e913960400191505060405180910390fd5b600054610100900460ff16158015610ccc576000805460ff1961ff0019909116610100171660011790555b610cde6000610cd9610953565b610441565b7f6bc9af616991ee5669a4db9fdf1be40cf0f301aaa197206636e2f4b9a3c7af3b6097557f81349814bed7dfa157b76a21259a8d40c0afbebce228b6fa6309925210da2d6d6098557f172d99a02b0e57f8f6fa2be8cb376f24af61ff9401d1c478debdb285b6512b1f60995580156108da576000805461ff001916905550565b600061050f826110c9565b600061050c836001600160a01b0384166110cd565b600061050c836001600160a01b038416611117565b60008183610e1f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610de4578181015183820152602001610dcc565b50505050905090810190601f168015610e115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610e2b57fe5b0495945050505050565b81546000908210610e775760405162461bcd60e51b81526004018080602001828103825260228152602001806112176022913960400191505060405180910390fd5b826000018281548110610e8657fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b610ec3826001600160a01b03166111dd565b610f14576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610f525780518252601f199092019160209182019101610f33565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610fb4576040519150601f19603f3d011682016040523d82523d6000602084013e610fb9565b606091505b509150915081611010576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156110695780806020019051602081101561102c57600080fd5b50516110695760405162461bcd60e51b815260040180806020018281038252602a815260200180611316602a913960400191505060405180910390fd5b50505050565b600081848411156110c15760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610de4578181015183820152602001610dcc565b505050900390565b5490565b60006110d98383610e99565b61110f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050f565b50600061050f565b600081815260018301602052604081205480156111d3578354600019808301919081019060009087908390811061114a57fe5b906000526020600020015490508087600001848154811061116757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061119757fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061050f565b600091505061050f565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061062257505015159291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865205661756c7420636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865206f776e6572486f6e6573744665652e64697374726962757465486f6e6573744173736574526577617264733a206163636f756e74206d7573742062652076616c6964416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66486f6e6573744665652e646973747269627574655265736572766564526577617264733a206163636f756e74206d7573742062652076616c6964486f6e6573744665652e696e697469616c697a653a20686f6e657374436f6e66696775726174696f6e2061646472657373206d7573742062652076616c6964a2646970667358221220f51ad9f2595a9b6d072fea48fc02289b4316efa06aa89b7228af0372766f031464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063a45d7325116100a2578063ce16489e11610071578063ce16489e146102ba578063d547741f146102c2578063eaf896fd146102ee578063eb04a80c146102f6578063f2fde38b1461031c57610116565b8063a45d732514610243578063af5ce1041461026f578063c4d66de814610277578063ca15c8731461029d57610116565b806349dcd6a1116100e957806349dcd6a1146101ac5780636c003a9b146101b45780639010d07c146101bc57806391d14854146101fb578063a217fddf1461023b57610116565b80631df4ccfc1461011b578063248a9ca3146101355780632f2ff15d1461015257806336568abe14610180575b600080fd5b610123610342565b60408051918252519081900360200190f35b6101236004803603602081101561014b57600080fd5b50356103ce565b61017e6004803603604081101561016857600080fd5b50803590602001356001600160a01b03166103e3565b005b61017e6004803603604081101561019657600080fd5b50803590602001356001600160a01b031661044f565b6101236104b0565b6101236104b6565b6101df600480360360408110156101d257600080fd5b50803590602001356104f4565b604080516001600160a01b039092168252519081900360200190f35b6102276004803603604081101561021157600080fd5b50803590602001356001600160a01b0316610515565b604080519115158252519081900360200190f35b61012361052d565b6101236004803603604081101561025957600080fd5b506001600160a01b038135169060200135610532565b61012361062a565b61017e6004803603602081101561028d57600080fd5b50356001600160a01b031661066d565b610123600480360360208110156102b357600080fd5b5035610777565b61012361078e565b61017e600480360360408110156102d857600080fd5b50803590602001356001600160a01b0316610794565b6101236107ed565b61017e6004803603602081101561030c57600080fd5b50356001600160a01b03166107f3565b61017e6004803603602081101561033257600080fd5b50356001600160a01b03166108bd565b60008061034d6108dd565b9050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561039c57600080fd5b505afa1580156103b0573d6000803e3d6000fd5b505050506040513d60208110156103c657600080fd5b505191505090565b60009081526065602052604090206002015490565b60008281526065602052604090206002015461040690610401610953565b610515565b6104415760405162461bcd60e51b815260040180806020018281038252602f815260200180611239602f913960400191505060405180910390fd5b61044b8282610957565b5050565b610457610953565b6001600160a01b0316816001600160a01b0316146104a65760405162461bcd60e51b815260040180806020018281038252602f8152602001806113a3602f913960400191505060405180910390fd5b61044b82826109c0565b60975490565b60006104ef609b546104e9670de0b6b3a76400006104e36104d5610a29565b6104dd610a6e565b90610a8a565b90610ae3565b90610b25565b905090565b600082815260656020526040812061050c9083610b7f565b90505b92915050565b600082815260656020526040812061050c9083610b8b565b600081565b600061054060985433610515565b61057b5760405162461bcd60e51b815260040180806020018281038252602f8152602001806112e7602f913960400191505060405180910390fd5b6001600160a01b0383166105c05760405162461bcd60e51b815260040180806020018281038252603d815260200180611366603d913960400191505060405180910390fd5b60006105ca6104b6565b9050801561060c576105ef84826105df6108dd565b6001600160a01b03169190610ba0565b6106036105fa610342565b609c5490610b25565b609c556000609b555b610622836104e383670de0b6b3a7640000610a8a565b949350505050565b600080610647610638610a29565b670de0b6b3a764000090610bf7565b9050610667609c546104e9670de0b6b3a76400006104e3856104dd610a6e565b91505090565b600054610100900460ff16806106865750610686610c39565b80610694575060005460ff16155b6106cf5760405162461bcd60e51b815260040180806020018281038252602e8152602001806112b9602e913960400191505060405180910390fd5b600054610100900460ff161580156106fa576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03821661073f5760405162461bcd60e51b815260040180806020018281038252603f81526020018061140c603f913960400191505060405180910390fd5b610747610c3f565b609a80546001600160a01b0319166001600160a01b038416179055801561044b576000805461ff00191690555050565b600081815260656020526040812061050f90610d5e565b60995490565b6000828152606560205260409020600201546107b290610401610953565b6104a65760405162461bcd60e51b81526004018080602001828103825260308152602001806112686030913960400191505060405180910390fd5b60985490565b6107fe600033610515565b6108395760405162461bcd60e51b81526004018080602001828103825260268152602001806113406026913960400191505060405180910390fd5b6001600160a01b03811661087e5760405162461bcd60e51b815260040180806020018281038252603a8152602001806113d2603a913960400191505060405180910390fd5b600061088861062a565b9050801561044b5761089d82826105df6108dd565b6108b16108a8610342565b609b5490610b25565b609b556000609c555050565b6108c86000826103e3565b6108da60006108d5610953565b610794565b50565b609a54604080516304367d0960e51b815290516000926001600160a01b0316916386cfa120916004808301926020929190829003018186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d602081101561094c57600080fd5b5051905090565b3390565b600082815260656020526040902061096f9082610d69565b1561044b5761097c610953565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206109d89082610d7e565b1561044b576109e5610953565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b609a54604080516313ef2ded60e11b815290516000926001600160a01b0316916327de5bda916004808301926020929190829003018186803b15801561092257600080fd5b60006104ef609c54610a84609b54610a84610342565b90610bf7565b600082610a995750600061050f565b82820282848281610aa657fe5b041461050c5760405162461bcd60e51b81526004018080602001828103825260218152602001806112986021913960400191505060405180910390fd5b600061050c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d93565b60008282018381101561050c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061050c8383610e35565b600061050c836001600160a01b038416610e99565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bf2908490610eb1565b505050565b600061050c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061106f565b303b1590565b600054610100900460ff1680610c585750610c58610c39565b80610c66575060005460ff16155b610ca15760405162461bcd60e51b815260040180806020018281038252602e8152602001806112b9602e913960400191505060405180910390fd5b600054610100900460ff16158015610ccc576000805460ff1961ff0019909116610100171660011790555b610cde6000610cd9610953565b610441565b7f6bc9af616991ee5669a4db9fdf1be40cf0f301aaa197206636e2f4b9a3c7af3b6097557f81349814bed7dfa157b76a21259a8d40c0afbebce228b6fa6309925210da2d6d6098557f172d99a02b0e57f8f6fa2be8cb376f24af61ff9401d1c478debdb285b6512b1f60995580156108da576000805461ff001916905550565b600061050f826110c9565b600061050c836001600160a01b0384166110cd565b600061050c836001600160a01b038416611117565b60008183610e1f5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610de4578181015183820152602001610dcc565b50505050905090810190601f168015610e115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610e2b57fe5b0495945050505050565b81546000908210610e775760405162461bcd60e51b81526004018080602001828103825260228152602001806112176022913960400191505060405180910390fd5b826000018281548110610e8657fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b610ec3826001600160a01b03166111dd565b610f14576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610f525780518252601f199092019160209182019101610f33565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610fb4576040519150601f19603f3d011682016040523d82523d6000602084013e610fb9565b606091505b509150915081611010576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156110695780806020019051602081101561102c57600080fd5b50516110695760405162461bcd60e51b815260040180806020018281038252602a815260200180611316602a913960400191505060405180910390fd5b50505050565b600081848411156110c15760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610de4578181015183820152602001610dcc565b505050900390565b5490565b60006110d98383610e99565b61110f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050f565b50600061050f565b600081815260018301602052604081205480156111d3578354600019808301919081019060009087908390811061114a57fe5b906000526020600020015490508087600001848154811061116757fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061119757fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061050f565b600091505061050f565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061062257505015159291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865205661756c7420636f6e74726163745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865206f776e6572486f6e6573744665652e64697374726962757465486f6e6573744173736574526577617264733a206163636f756e74206d7573742062652076616c6964416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66486f6e6573744665652e646973747269627574655265736572766564526577617264733a206163636f756e74206d7573742062652076616c6964486f6e6573744665652e696e697469616c697a653a20686f6e657374436f6e66696775726174696f6e2061646472657373206d7573742062652076616c6964a2646970667358221220f51ad9f2595a9b6d072fea48fc02289b4316efa06aa89b7228af0372766f031464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8128,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8131,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8196,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8121,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8241,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8237_storage)"
      },
      {
        "astId": 8486,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11733,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "_assetManagerRole",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 11735,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "_vaultRole",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 11737,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "_governorRole",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 13194,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "_honestConfiguration",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 13196,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "_claimableRewards",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 13198,
        "contract": "contracts/HonestFee.sol:HonestFee",
        "label": "_reservedRewards",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8237_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8237_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)9778_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9777,
            "contract": "contracts/HonestFee.sol:HonestFee",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9598_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)8237_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 8234,
            "contract": "contracts/HonestFee.sol:HonestFee",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)9778_storage"
          },
          {
            "astId": 8236,
            "contract": "contracts/HonestFee.sol:HonestFee",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)9598_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9593,
            "contract": "contracts/HonestFee.sol:HonestFee",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9597,
            "contract": "contracts/HonestFee.sol:HonestFee",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1049600",
      "executionCost": "1087",
      "totalCost": "1050687"
    },
    "external": {
      "DEFAULT_ADMIN_ROLE()": "309",
      "assetManagerRole()": "1021",
      "claimableRewards()": "infinite",
      "distributeClaimableRewards(address,uint256)": "infinite",
      "distributeReservedRewards(address)": "infinite",
      "getRoleAdmin(bytes32)": "1158",
      "getRoleMember(bytes32,uint256)": "infinite",
      "getRoleMemberCount(bytes32)": "infinite",
      "governorRole()": "1020",
      "grantRole(bytes32,address)": "infinite",
      "hasRole(bytes32,address)": "infinite",
      "initialize(address)": "infinite",
      "renounceRole(bytes32,address)": "infinite",
      "reservedRewards()": "infinite",
      "revokeRole(bytes32,address)": "infinite",
      "totalFee()": "infinite",
      "transferOwnership(address)": "infinite",
      "vaultRole()": "1064"
    },
    "internal": {
      "_availableRewards()": "infinite",
      "_claimableRewardsPercentage()": "infinite",
      "_honestAsset()": "infinite"
    }
  }
}