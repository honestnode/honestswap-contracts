{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetManagerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "credits",
          "type": "uint256"
        }
      ],
      "name": "collect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governorRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "honestConfiguration",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "priceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "shareOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shares",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x788A6D6Ec9dfd283810e93D0245e5Da283cfE7f1",
    "contractAddress": "0x5eD7F5ba58f900d3Aeba825C916641574ab17F64",
    "transactionIndex": 19,
    "gasUsed": "2154506",
    "logsBloom": "0x
    "blockHash": "0xcc402433025ee3aa12d572a16cbca1542dedf8642d22d493905a8f72dfc59ffd",
    "transactionHash": "0x64d3605f8eb0ab554f3f7b58c225606d0c2b2ebad28f0ca49a80109bd54d31ff",
    "logs": [],
    "blockNumber": 8915506,
    "cumulativeGasUsed": "3861086",
    "status": 1,
    "byzantium": true
  },
  "address": "0x5eD7F5ba58f900d3Aeba825C916641574ab17F64",
  "args": [],
  "solcInputHash": "0x57f8616e1b9f5e60b5dddddb3a19aaaa55edb00aeb2821c2b44dfb8838d95b70",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetManagerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"honestConfiguration\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"shareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/YearnV2Integration.sol\":\"YearnV2Integration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"contracts/AbstractHonestContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {Initializable} from '@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol';\\nimport {AccessControlUpgradeSafe} from '@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol';\\n\\nabstract contract AbstractHonestContract is Initializable, AccessControlUpgradeSafe {\\n\\n    bytes32 private _assetManagerRole;\\n    bytes32 private _vaultRole;\\n    bytes32 private _governorRole;\\n\\n    function initialize() internal initializer() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _assetManagerRole = keccak256(\\\"HONEST_ASSET_MANAGER\\\");\\n        _vaultRole = keccak256(\\\"HONEST_VAULT\\\");\\n        _governorRole = keccak256(\\\"HONEST_GOVERNOR\\\");\\n    }\\n\\n    function assetManagerRole() external view returns (bytes32) {\\n        return _assetManagerRole;\\n    }\\n\\n    function vaultRole() external view returns (bytes32) {\\n        return _vaultRole;\\n    }\\n\\n    function governorRole() external view returns (bytes32) {\\n        return _governorRole;\\n    }\\n\\n    function transferOwnership(address to) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, to);\\n        revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAssetManager {\\n        require(hasRole(_assetManagerRole, msg.sender), \\\"AccessControl: caller is not the AssetManager contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault {\\n        require(hasRole(_vaultRole, msg.sender), \\\"AccessControl: caller is not the Vault contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"AccessControl: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xd7ca371f8f4f7da00029e7634468c9cc6f24314c26b2080387397d3dfab6e66e\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/integrations/IAssetPriceIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\ninterface IAssetPriceIntegration {\\n\\n    enum FeedsTarget {USD, ETH}\\n\\n    function honestConfiguration() external view returns (address);\\n\\n    function ethPriceFeeds() external view returns (address);\\n\\n    function getPrice(address asset) external view returns (uint);\\n\\n    function getPrices(address[] calldata assets) external view returns (uint[] memory);\\n}\",\"keccak256\":\"0xa351ba6b2e7b7a2990f40bc9d9f59fd2ea395006ccb9e55e0fa9776220cf7c05\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/integrations/IInvestmentIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\ninterface IInvestmentIntegration {\\n\\n    function invest(address account, address asset, uint amount) external returns (uint);\\n\\n    function collect(address account, address asset, uint credits) external returns (uint);\\n\\n    function priceOf(address asset) external view returns (uint);\\n\\n    function shareOf(address asset) external view returns (uint);\\n\\n    function shares() external view returns (address[] memory, uint[] memory, uint, uint);\\n\\n    function balanceOf(address asset) external view returns (uint);\\n\\n    function balances() external view returns (address[] memory, uint[] memory, uint);\\n\\n    function totalBalance() external view returns (uint);\\n}\",\"keccak256\":\"0x70c249502e54246a6437649e68b9b3934e2b5ab781471ca41d53152b4c925e40\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/integrations/YearnV2Integration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {ReentrancyGuardUpgradeSafe} from '@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol';\\nimport {IInvestmentIntegration} from \\\"./IInvestmentIntegration.sol\\\";\\nimport {StandardERC20} from \\\"../libs/StandardERC20.sol\\\";\\nimport {AbstractHonestContract} from \\\"../AbstractHonestContract.sol\\\";\\nimport {IHonestConfiguration} from '../interfaces/IHonestConfiguration.sol';\\n\\ninterface yTokenV2 {\\n    function deposit(uint _amount) external;\\n\\n    function withdraw(uint _shares) external;\\n\\n    function getPricePerFullShare() external view returns (uint);\\n}\\n\\ncontract YearnV2Integration is IInvestmentIntegration, AbstractHonestContract, ReentrancyGuardUpgradeSafe {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    using StandardERC20 for ERC20;\\n\\n    address private _honestConfiguration;\\n\\n    function initialize(address honestConfiguration) external initializer() {\\n        require(honestConfiguration != address(0), 'YearnV2Integration.initialize: honestConfiguration address must be valid');\\n\\n        super.initialize();\\n        __ReentrancyGuard_init();\\n        _honestConfiguration = honestConfiguration;\\n    }\\n\\n    function invest(address account, address asset, uint amount) external override onlyVault nonReentrant returns (uint) {\\n        require(account != address(0), \\\"YearnV2Integration.invest: account must be valid\\\");\\n        require(amount > 0, \\\"YearnV2Integration.invest: invest must be greater than 0\\\");\\n\\n        IERC20(asset).safeTransferFrom(account, address(this), amount);\\n\\n        address yToken = _contractOf(asset);\\n        uint before = IERC20(yToken).balanceOf(address(this));\\n        IERC20(asset).safeApprove(yToken, amount);\\n        yTokenV2(yToken).deposit(amount);\\n\\n        uint credits = IERC20(yToken).balanceOf(address(this)).sub(before);\\n        return ERC20(yToken).standardize(credits);\\n    }\\n\\n    function collect(address account, address asset, uint credits) external override onlyVault nonReentrant returns (uint) {\\n        require(account != address(0), \\\"YearnV2Integration.collect: account must be valid\\\");\\n        require(credits > 0, \\\"YearnV2Integration.collect: credits must be greater than 0\\\");\\n\\n        yTokenV2 yToken = yTokenV2(_contractOf(asset));\\n        uint originShares = ERC20(address(yToken)).resume(credits);\\n        uint amount = originShares.mul(yToken.getPricePerFullShare()).div(uint(1e18));\\n        yToken.withdraw(originShares);\\n\\n        require(amount <= IERC20(asset).balanceOf(address(this)), \\\"YearnV2Integration.collect: insufficient balance\\\");\\n        IERC20(asset).safeTransfer(account, amount);\\n\\n        return ERC20(asset).standardize(amount);\\n    }\\n\\n    function priceOf(address asset) external override view returns (uint) {\\n        address yToken = _contractOf(asset);\\n        return yTokenV2(yToken).getPricePerFullShare();\\n    }\\n\\n    function shareOf(address asset) public override view returns (uint) {\\n        address yToken = _contractOf(asset);\\n        return ERC20(yToken).standardBalanceOf(address(this));\\n    }\\n\\n    function shares() external override view returns (address[] memory, uint[] memory, uint, uint) {\\n        address[] memory assets = IHonestConfiguration(_honestConfiguration).activeBasketAssets();\\n        uint[] memory credits = new uint[](assets.length);\\n        uint totalShare;\\n        uint totalBalance;\\n        for (uint i = 0; i < assets.length; ++i) {\\n            credits[i] = shareOf(assets[i]);\\n            totalShare = totalShare.add(credits[i]);\\n            totalBalance = totalBalance.add(_balanceOf(assets[i]));\\n        }\\n        return (assets, credits, totalShare, totalBalance.mul(uint(1e18)).div(totalShare));\\n    }\\n\\n    function balanceOf(address asset) external override view returns (uint) {\\n        return _balanceOf(asset);\\n    }\\n\\n    function balances() external override view returns (address[] memory, uint[] memory, uint) {\\n        address[] memory assets = IHonestConfiguration(_honestConfiguration).activeBasketAssets();\\n        uint[] memory aBalances = new uint[](assets.length);\\n        uint totalBalances;\\n        for (uint i = 0; i < assets.length; ++i) {\\n            aBalances[i] = _balanceOf(assets[i]);\\n            totalBalances = totalBalances.add(aBalances[i]);\\n        }\\n        return (assets, aBalances, totalBalances);\\n    }\\n\\n    function totalBalance() external override view returns (uint) {\\n        address[] memory assets = IHonestConfiguration(_honestConfiguration).activeBasketAssets();\\n        uint balance;\\n        for (uint i = 0; i < assets.length; ++i) {\\n            balance = balance.add(_balanceOf(assets[i]));\\n        }\\n        return balance;\\n    }\\n\\n    function _contractOf(address asset) internal view returns (address) {\\n        return IHonestConfiguration(_honestConfiguration).basketAssetInvestmentIntegration(asset);\\n    }\\n\\n    function _balanceOf(address _asset) internal view returns (uint) {\\n        address yToken = _contractOf(_asset);\\n\\n        uint credits = ERC20(yToken).standardBalanceOf(address(this));\\n        if (credits == 0) {\\n            return 0;\\n        }\\n        return yTokenV2(yToken).getPricePerFullShare().mul(credits).div(uint(1e18));\\n    }\\n}\",\"keccak256\":\"0xaee764ca1918d48685ef0e413057da7a2870f45659a2cfb63e7a9a7cb7412941\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/interfaces/IHonestConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {IAssetPriceIntegration} from '../integrations/IAssetPriceIntegration.sol';\\n\\ninterface IHonestConfiguration {\\n\\n    function honestAsset() external view returns (address);\\n\\n    function basketAssets() external view returns (address[] memory, bool[] memory);\\n\\n    function activeBasketAssets() external view returns (address[] memory);\\n\\n    function basketAssetInvestmentIntegration(address asset) external view returns (address);\\n\\n    function swapFeeRate() external view returns (uint);\\n\\n    function redeemFeeRate() external view returns (uint);\\n\\n    function claimableRewardsPercentage() external view returns (uint);\\n\\n    function addBasketAsset(address asset, address bAssetInvestment) external;\\n\\n    function removeBasketAsset(address asset) external;\\n\\n    function activateBasketAsset(address asset) external;\\n\\n    function deactivateBasketAsset(address asset) external;\\n\\n    function setSwapFeeRate(uint feeRate) external;\\n\\n    function setRedeemFeeRate(uint feeRate) external;\\n\\n    function setClaimableRewardsPercentage(uint percentage) external;\\n}\",\"keccak256\":\"0xedc2dffa10254d4d08690346e3a598e5c80c36898c971bfe33835770b9984747\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/libs/StandardERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n/**\\n * @dev Standard ERC20 contract functions, support 18 decimals ERC20 token\\n *\\n * use this library add `using StandardERC20 for ERC20;` statement to your contract\\n */\\nlibrary StandardERC20 {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    uint8 private constant _standardDecimals = 18;\\n\\n    function standardBalanceOf(ERC20 token, address account) internal view returns (uint) {\\n        uint balance = token.balanceOf(account);\\n        return standardize(token, balance);\\n    }\\n\\n    function standardApprove(ERC20 token, address to, uint standardAmount) internal {\\n        return IERC20(token).safeApprove(to, resume(token, standardAmount));\\n    }\\n\\n    function standardTransfer(ERC20 token, address to, uint standardAmount) internal {\\n        return IERC20(token).safeTransfer(to, resume(token, standardAmount));\\n    }\\n\\n    function standardTransferFrom(ERC20 token, address from, address to, uint standardAmount) internal {\\n        return IERC20(token).safeTransferFrom(from, to, resume(token, standardAmount));\\n    }\\n\\n    function standardize(ERC20 token, uint value) internal view returns (uint) {\\n        uint8 decimals = token.decimals();\\n        require(decimals <= _standardDecimals, 'illegal decimals');\\n        if (decimals == _standardDecimals) {\\n            return value;\\n        }\\n        return value.mul(uint(10) ** uint(_standardDecimals - decimals));\\n    }\\n\\n    function resume(ERC20 token, uint value) internal view returns (uint) {\\n        uint8 decimals = token.decimals();\\n        require(decimals <= _standardDecimals, 'illegal decimals');\\n        if (decimals == _standardDecimals) {\\n            return value;\\n        }\\n        return value.div(uint(10) ** uint(_standardDecimals - decimals));\\n    }\\n}\",\"keccak256\":\"0x3c14dbd452250ed40efb7dd7bfc068f295d3096e7c439ae0eeefefd28dbcc718\",\"license\":\"LGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612606806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063c8fea2fb1161007c578063c8fea2fb14610481578063ca15c873146104b7578063ce16489e146104d4578063d547741f146104dc578063eaf896fd14610508578063f2fde38b1461051057610137565b806391d14854146103e5578063a217fddf14610425578063ad7a672f1461042d578063b95ed06f14610435578063c4d66de81461045b57610137565b806349dcd6a1116100ff57806349dcd6a11461029a578063653ac422146102a257806370a08231146102d85780637bb98a68146102fe5780639010d07c146103a657610137565b806303314efa1461013c57806321e5e2c4146101eb578063248a9ca3146102235780632f2ff15d1461024057806336568abe1461026e575b600080fd5b610144610536565b604051808060200180602001858152602001848152602001838103835287818151815260200191508051906020019060200280838360005b8381101561019457818101518382015260200161017c565b50505050905001838103825286818151815260200191508051906020019060200280838360005b838110156101d35781810151838201526020016101bb565b50505050905001965050505050505060405180910390f35b6102116004803603602081101561020157600080fd5b50356001600160a01b031661076b565b60408051918252519081900360200190f35b6102116004803603602081101561023957600080fd5b5035610795565b61026c6004803603604081101561025657600080fd5b50803590602001356001600160a01b03166107aa565b005b61026c6004803603604081101561028457600080fd5b50803590602001356001600160a01b0316610816565b610211610877565b610211600480360360608110156102b857600080fd5b506001600160a01b0381358116916020810135909116906040013561087d565b610211600480360360208110156102ee57600080fd5b50356001600160a01b0316610b6f565b610306610b80565b604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015610350578181015183820152602001610338565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561038f578181015183820152602001610377565b505050509050019550505050505060405180910390f35b6103c9600480360360408110156103bc57600080fd5b5080359060200135610d58565b604080516001600160a01b039092168252519081900360200190f35b610411600480360360408110156103fb57600080fd5b50803590602001356001600160a01b0316610d77565b604080519115158252519081900360200190f35b610211610d8f565b610211610d94565b6102116004803603602081101561044b57600080fd5b50356001600160a01b0316610ee5565b61026c6004803603602081101561047157600080fd5b50356001600160a01b0316610f5f565b6102116004803603606081101561049757600080fd5b506001600160a01b03813581169160208101359091169060400135611071565b610211600480360360208110156104cd57600080fd5b5035611377565b61021161138e565b61026c600480360360408110156104f257600080fd5b50803590602001356001600160a01b0316611394565b6102116113ed565b61026c6004803603602081101561052657600080fd5b50356001600160a01b03166113f3565b606080600080606060cc60009054906101000a90046001600160a01b03166001600160a01b031663c00544e76040518163ffffffff1660e01b815260040160006040518083038186803b15801561058c57600080fd5b505afa1580156105a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105c957600080fd5b81019080805160405193929190846401000000008211156105e957600080fd5b9083019060208201858111156105fe57600080fd5b825186602082028301116401000000008211171561061b57600080fd5b82525081516020918201928201910280838360005b83811015610648578181015183820152602001610630565b5050505090500160405250505090506060815167ffffffffffffffff8111801561067157600080fd5b5060405190808252806020026020018201604052801561069b578160200160208202803683370190505b50905060008060005b8451811015610739576106c98582815181106106bc57fe5b602002602001015161076b565b8482815181106106d557fe5b6020026020010181815250506107078482815181106106f057fe5b60200260200101518461141390919063ffffffff16565b925061072f61072886838151811061071b57fe5b602002602001015161146d565b8390611413565b91506001016106a4565b508383836107598161075386670de0b6b3a7640000611525565b9061157e565b97509750975097505050505090919293565b600080610777836115c0565b905061078c6001600160a01b03821630611643565b9150505b919050565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546107cd906107c86116cb565b610d77565b6108085760405162461bcd60e51b815260040180806020018281038252602f815260200180612352602f913960400191505060405180910390fd5b61081282826116cf565b5050565b61081e6116cb565b6001600160a01b0316816001600160a01b03161461086d5760405162461bcd60e51b815260040180806020018281038252602f8152602001806125a2602f913960400191505060405180910390fd5b6108128282611738565b60975490565b600061088b60985433610d77565b6108c65760405162461bcd60e51b815260040180806020018281038252602f8152602001806124e3602f913960400191505060405180910390fd5b609a5460ff1661091d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b609a805460ff191690556001600160a01b03841661096c5760405162461bcd60e51b81526004018080602001828103825260308152602001806124826030913960400191505060405180910390fd5b600082116109ab5760405162461bcd60e51b815260040180806020018281038252603881526020018061231a6038913960400191505060405180910390fd5b6109c06001600160a01b0384168530856117a1565b60006109cb846115c0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b50519050610a5e6001600160a01b0386168386611801565b816001600160a01b031663b6b55f25856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506000610b4182846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b0f57600080fd5b505afa158015610b23573d6000803e3d6000fd5b505050506040513d6020811015610b3957600080fd5b505190611919565b9050610b566001600160a01b0384168261195b565b9350505050609a805460ff191660011790559392505050565b6000610b7a8261146d565b92915050565b6060806000606060cc60009054906101000a90046001600160a01b03166001600160a01b031663c00544e76040518163ffffffff1660e01b815260040160006040518083038186803b158015610bd557600080fd5b505afa158015610be9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c1257600080fd5b8101908080516040519392919084640100000000821115610c3257600080fd5b908301906020820185811115610c4757600080fd5b8251866020820283011164010000000082111715610c6457600080fd5b82525081516020918201928201910280838360005b83811015610c91578181015183820152602001610c79565b5050505090500160405250505090506060815167ffffffffffffffff81118015610cba57600080fd5b50604051908082528060200260200182016040528015610ce4578160200160208202803683370190505b5090506000805b8351811015610d4b57610d0384828151811061071b57fe5b838281518110610d0f57fe5b602002602001018181525050610d41838281518110610d2a57fe5b60200260200101518361141390919063ffffffff16565b9150600101610ceb565b5091945092509050909192565b6000828152606560205260408120610d709083611a3a565b9392505050565b6000828152606560205260408120610d709083611a46565b600081565b6000606060cc60009054906101000a90046001600160a01b03166001600160a01b031663c00544e76040518163ffffffff1660e01b815260040160006040518083038186803b158015610de657600080fd5b505afa158015610dfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e2357600080fd5b8101908080516040519392919084640100000000821115610e4357600080fd5b908301906020820185811115610e5857600080fd5b8251866020820283011164010000000082111715610e7557600080fd5b82525081516020918201928201910280838360005b83811015610ea2578181015183820152602001610e8a565b505050509050016040525050509050600080600090505b8251811015610ede57610ed461072884838151811061071b57fe5b9150600101610eb9565b5091505090565b600080610ef1836115c0565b9050806001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2c57600080fd5b505afa158015610f40573d6000803e3d6000fd5b505050506040513d6020811015610f5657600080fd5b50519392505050565b600054610100900460ff1680610f785750610f78611a5b565b80610f86575060005460ff16155b610fc15760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015610fec576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166110315760405162461bcd60e51b81526004018080602001828103825260488152602001806123816048913960600191505060405180910390fd5b611039611a61565b611041611b80565b60cc80546001600160a01b0319166001600160a01b0384161790558015610812576000805461ff00191690555050565b600061107f60985433610d77565b6110ba5760405162461bcd60e51b815260040180806020018281038252602f8152602001806124e3602f913960400191505060405180910390fd5b609a5460ff16611111576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b609a805460ff191690556001600160a01b0384166111605760405162461bcd60e51b81526004018080602001828103825260318152602001806124b26031913960400191505060405180910390fd5b6000821161119f5760405162461bcd60e51b815260040180806020018281038252603a8152602001806123c9603a913960400191505060405180910390fd5b60006111aa846115c0565b905060006111c16001600160a01b03831685611c29565b90506000611240670de0b6b3a7640000610753856001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561120d57600080fd5b505afa158015611221573d6000803e3d6000fd5b505050506040513d602081101561123757600080fd5b50518590611525565b9050826001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561128857600080fd5b505af115801561129c573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b038a1693506370a0823192506024808301926020929190829003018186803b1580156112e657600080fd5b505afa1580156112fa573d6000803e3d6000fd5b505050506040513d602081101561131057600080fd5b50518111156113505760405162461bcd60e51b81526004018080602001828103825260308152602001806125126030913960400191505060405180910390fd5b6113646001600160a01b0387168883611d08565b610b566001600160a01b0387168261195b565b6000818152606560205260408120610b7a90611d5a565b60995490565b6000828152606560205260409020600201546113b2906107c86116cb565b61086d5760405162461bcd60e51b81526004018080602001828103825260308152602001806124036030913960400191505060405180910390fd5b60985490565b6113fe6000826107aa565b611410600061140b6116cb565b611394565b50565b600082820183811015610d70576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080611479836115c0565b905060006114906001600160a01b03831630611643565b9050806114a257600092505050610790565b61151d670de0b6b3a764000061075383856001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114eb57600080fd5b505afa1580156114ff573d6000803e3d6000fd5b505050506040513d602081101561151557600080fd5b505190611525565b949350505050565b60008261153457506000610b7a565b8282028284828161154157fe5b0414610d705760405162461bcd60e51b81526004018080602001828103825260218152602001806124336021913960400191505060405180910390fd5b6000610d7083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611d65565b60cc546040805163511a44ad60e01b81526001600160a01b0384811660048301529151600093929092169163511a44ad91602480820192602092909190829003018186803b15801561161157600080fd5b505afa158015611625573d6000803e3d6000fd5b505050506040513d602081101561163b57600080fd5b505192915050565b600080836001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561169357600080fd5b505afa1580156116a7573d6000803e3d6000fd5b505050506040513d60208110156116bd57600080fd5b5051905061151d848261195b565b3390565b60008281526065602052604090206116e79082611e07565b15610812576116f46116cb565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206117509082611e1c565b156108125761175d6116cb565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526117fb908590611e31565b50505050565b801580611887575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d602081101561188357600080fd5b5051155b6118c25760405162461bcd60e51b815260040180806020018281038252603681526020018061256c6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611914908490611e31565b505050565b6000610d7083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611ee2565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561199757600080fd5b505afa1580156119ab573d6000803e3d6000fd5b505050506040513d60208110156119c157600080fd5b50519050601260ff82161115611a11576040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c20646563696d616c7360801b604482015290519081900360640190fd5b60ff811660121415611a265782915050610b7a565b61151d8360ff601284900316600a0a611525565b6000610d708383611f3c565b6000610d70836001600160a01b038416611fa0565b303b1590565b600054610100900460ff1680611a7a5750611a7a611a5b565b80611a88575060005460ff16155b611ac35760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015611aee576000805460ff1961ff0019909116610100171660011790555b611b006000611afb6116cb565b610808565b7f6bc9af616991ee5669a4db9fdf1be40cf0f301aaa197206636e2f4b9a3c7af3b6097557f81349814bed7dfa157b76a21259a8d40c0afbebce228b6fa6309925210da2d6d6098557f172d99a02b0e57f8f6fa2be8cb376f24af61ff9401d1c478debdb285b6512b1f6099558015611410576000805461ff001916905550565b600054610100900460ff1680611b995750611b99611a5b565b80611ba7575060005460ff16155b611be25760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015611c0d576000805460ff1961ff0019909116610100171660011790555b611c15611fb8565b8015611410576000805461ff001916905550565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6557600080fd5b505afa158015611c79573d6000803e3d6000fd5b505050506040513d6020811015611c8f57600080fd5b50519050601260ff82161115611cdf576040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c20646563696d616c7360801b604482015290519081900360640190fd5b60ff811660121415611cf45782915050610b7a565b61151d8360ff601284900316600a0a61157e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611914908490611e31565b6000610b7a82612066565b60008183611df15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611db6578181015183820152602001611d9e565b50505050905090810190601f168015611de35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611dfd57fe5b0495945050505050565b6000610d70836001600160a01b03841661206a565b6000610d70836001600160a01b0384166120b4565b6060611e86826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661217a9092919063ffffffff16565b80519091501561191457808060200190516020811015611ea557600080fd5b50516119145760405162461bcd60e51b815260040180806020018281038252602a815260200180612542602a913960400191505060405180910390fd5b60008184841115611f345760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611db6578181015183820152602001611d9e565b505050900390565b81546000908210611f7e5760405162461bcd60e51b81526004018080602001828103825260228152602001806122f86022913960400191505060405180910390fd5b826000018281548110611f8d57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b600054610100900460ff1680611fd15750611fd1611a5b565b80611fdf575060005460ff16155b61201a5760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015612045576000805460ff1961ff0019909116610100171660011790555b609a805460ff191660011790558015611410576000805461ff001916905550565b5490565b60006120768383611fa0565b6120ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b7a565b506000610b7a565b6000818152600183016020526040812054801561217057835460001980830191908101906000908790839081106120e757fe5b906000526020600020015490508087600001848154811061210457fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061213457fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610b7a565b6000915050610b7a565b606061151d8484600085606061218f856122f1565b6121e0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061221f5780518252601f199092019160209182019101612200565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612281576040519150601f19603f3d011682016040523d82523d6000602084013e612286565b606091505b5091509150811561229a57915061151d9050565b8051156122aa5780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611db6578181015183820152602001611d9e565b3b15159056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473596561726e5632496e746567726174696f6e2e696e766573743a20696e76657374206d7573742062652067726561746572207468616e2030416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74596561726e5632496e746567726174696f6e2e696e697469616c697a653a20686f6e657374436f6e66696775726174696f6e2061646472657373206d7573742062652076616c6964596561726e5632496e746567726174696f6e2e636f6c6c6563743a2063726564697473206d7573742062652067726561746572207468616e2030416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564596561726e5632496e746567726174696f6e2e696e766573743a206163636f756e74206d7573742062652076616c6964596561726e5632496e746567726174696f6e2e636f6c6c6563743a206163636f756e74206d7573742062652076616c6964416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865205661756c7420636f6e7472616374596561726e5632496e746567726174696f6e2e636f6c6c6563743a20696e73756666696369656e742062616c616e63655361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220fa18a7859535ca2e258c360691869c729db612c26bd2e0ce3739057c6ddd37c264736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806391d14854116100b8578063c8fea2fb1161007c578063c8fea2fb14610481578063ca15c873146104b7578063ce16489e146104d4578063d547741f146104dc578063eaf896fd14610508578063f2fde38b1461051057610137565b806391d14854146103e5578063a217fddf14610425578063ad7a672f1461042d578063b95ed06f14610435578063c4d66de81461045b57610137565b806349dcd6a1116100ff57806349dcd6a11461029a578063653ac422146102a257806370a08231146102d85780637bb98a68146102fe5780639010d07c146103a657610137565b806303314efa1461013c57806321e5e2c4146101eb578063248a9ca3146102235780632f2ff15d1461024057806336568abe1461026e575b600080fd5b610144610536565b604051808060200180602001858152602001848152602001838103835287818151815260200191508051906020019060200280838360005b8381101561019457818101518382015260200161017c565b50505050905001838103825286818151815260200191508051906020019060200280838360005b838110156101d35781810151838201526020016101bb565b50505050905001965050505050505060405180910390f35b6102116004803603602081101561020157600080fd5b50356001600160a01b031661076b565b60408051918252519081900360200190f35b6102116004803603602081101561023957600080fd5b5035610795565b61026c6004803603604081101561025657600080fd5b50803590602001356001600160a01b03166107aa565b005b61026c6004803603604081101561028457600080fd5b50803590602001356001600160a01b0316610816565b610211610877565b610211600480360360608110156102b857600080fd5b506001600160a01b0381358116916020810135909116906040013561087d565b610211600480360360208110156102ee57600080fd5b50356001600160a01b0316610b6f565b610306610b80565b604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b83811015610350578181015183820152602001610338565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561038f578181015183820152602001610377565b505050509050019550505050505060405180910390f35b6103c9600480360360408110156103bc57600080fd5b5080359060200135610d58565b604080516001600160a01b039092168252519081900360200190f35b610411600480360360408110156103fb57600080fd5b50803590602001356001600160a01b0316610d77565b604080519115158252519081900360200190f35b610211610d8f565b610211610d94565b6102116004803603602081101561044b57600080fd5b50356001600160a01b0316610ee5565b61026c6004803603602081101561047157600080fd5b50356001600160a01b0316610f5f565b6102116004803603606081101561049757600080fd5b506001600160a01b03813581169160208101359091169060400135611071565b610211600480360360208110156104cd57600080fd5b5035611377565b61021161138e565b61026c600480360360408110156104f257600080fd5b50803590602001356001600160a01b0316611394565b6102116113ed565b61026c6004803603602081101561052657600080fd5b50356001600160a01b03166113f3565b606080600080606060cc60009054906101000a90046001600160a01b03166001600160a01b031663c00544e76040518163ffffffff1660e01b815260040160006040518083038186803b15801561058c57600080fd5b505afa1580156105a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105c957600080fd5b81019080805160405193929190846401000000008211156105e957600080fd5b9083019060208201858111156105fe57600080fd5b825186602082028301116401000000008211171561061b57600080fd5b82525081516020918201928201910280838360005b83811015610648578181015183820152602001610630565b5050505090500160405250505090506060815167ffffffffffffffff8111801561067157600080fd5b5060405190808252806020026020018201604052801561069b578160200160208202803683370190505b50905060008060005b8451811015610739576106c98582815181106106bc57fe5b602002602001015161076b565b8482815181106106d557fe5b6020026020010181815250506107078482815181106106f057fe5b60200260200101518461141390919063ffffffff16565b925061072f61072886838151811061071b57fe5b602002602001015161146d565b8390611413565b91506001016106a4565b508383836107598161075386670de0b6b3a7640000611525565b9061157e565b97509750975097505050505090919293565b600080610777836115c0565b905061078c6001600160a01b03821630611643565b9150505b919050565b60009081526065602052604090206002015490565b6000828152606560205260409020600201546107cd906107c86116cb565b610d77565b6108085760405162461bcd60e51b815260040180806020018281038252602f815260200180612352602f913960400191505060405180910390fd5b61081282826116cf565b5050565b61081e6116cb565b6001600160a01b0316816001600160a01b03161461086d5760405162461bcd60e51b815260040180806020018281038252602f8152602001806125a2602f913960400191505060405180910390fd5b6108128282611738565b60975490565b600061088b60985433610d77565b6108c65760405162461bcd60e51b815260040180806020018281038252602f8152602001806124e3602f913960400191505060405180910390fd5b609a5460ff1661091d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b609a805460ff191690556001600160a01b03841661096c5760405162461bcd60e51b81526004018080602001828103825260308152602001806124826030913960400191505060405180910390fd5b600082116109ab5760405162461bcd60e51b815260040180806020018281038252603881526020018061231a6038913960400191505060405180910390fd5b6109c06001600160a01b0384168530856117a1565b60006109cb846115c0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a1c57600080fd5b505afa158015610a30573d6000803e3d6000fd5b505050506040513d6020811015610a4657600080fd5b50519050610a5e6001600160a01b0386168386611801565b816001600160a01b031663b6b55f25856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506000610b4182846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b0f57600080fd5b505afa158015610b23573d6000803e3d6000fd5b505050506040513d6020811015610b3957600080fd5b505190611919565b9050610b566001600160a01b0384168261195b565b9350505050609a805460ff191660011790559392505050565b6000610b7a8261146d565b92915050565b6060806000606060cc60009054906101000a90046001600160a01b03166001600160a01b031663c00544e76040518163ffffffff1660e01b815260040160006040518083038186803b158015610bd557600080fd5b505afa158015610be9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c1257600080fd5b8101908080516040519392919084640100000000821115610c3257600080fd5b908301906020820185811115610c4757600080fd5b8251866020820283011164010000000082111715610c6457600080fd5b82525081516020918201928201910280838360005b83811015610c91578181015183820152602001610c79565b5050505090500160405250505090506060815167ffffffffffffffff81118015610cba57600080fd5b50604051908082528060200260200182016040528015610ce4578160200160208202803683370190505b5090506000805b8351811015610d4b57610d0384828151811061071b57fe5b838281518110610d0f57fe5b602002602001018181525050610d41838281518110610d2a57fe5b60200260200101518361141390919063ffffffff16565b9150600101610ceb565b5091945092509050909192565b6000828152606560205260408120610d709083611a3a565b9392505050565b6000828152606560205260408120610d709083611a46565b600081565b6000606060cc60009054906101000a90046001600160a01b03166001600160a01b031663c00544e76040518163ffffffff1660e01b815260040160006040518083038186803b158015610de657600080fd5b505afa158015610dfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e2357600080fd5b8101908080516040519392919084640100000000821115610e4357600080fd5b908301906020820185811115610e5857600080fd5b8251866020820283011164010000000082111715610e7557600080fd5b82525081516020918201928201910280838360005b83811015610ea2578181015183820152602001610e8a565b505050509050016040525050509050600080600090505b8251811015610ede57610ed461072884838151811061071b57fe5b9150600101610eb9565b5091505090565b600080610ef1836115c0565b9050806001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2c57600080fd5b505afa158015610f40573d6000803e3d6000fd5b505050506040513d6020811015610f5657600080fd5b50519392505050565b600054610100900460ff1680610f785750610f78611a5b565b80610f86575060005460ff16155b610fc15760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015610fec576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0382166110315760405162461bcd60e51b81526004018080602001828103825260488152602001806123816048913960600191505060405180910390fd5b611039611a61565b611041611b80565b60cc80546001600160a01b0319166001600160a01b0384161790558015610812576000805461ff00191690555050565b600061107f60985433610d77565b6110ba5760405162461bcd60e51b815260040180806020018281038252602f8152602001806124e3602f913960400191505060405180910390fd5b609a5460ff16611111576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b609a805460ff191690556001600160a01b0384166111605760405162461bcd60e51b81526004018080602001828103825260318152602001806124b26031913960400191505060405180910390fd5b6000821161119f5760405162461bcd60e51b815260040180806020018281038252603a8152602001806123c9603a913960400191505060405180910390fd5b60006111aa846115c0565b905060006111c16001600160a01b03831685611c29565b90506000611240670de0b6b3a7640000610753856001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561120d57600080fd5b505afa158015611221573d6000803e3d6000fd5b505050506040513d602081101561123757600080fd5b50518590611525565b9050826001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561128857600080fd5b505af115801561129c573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b038a1693506370a0823192506024808301926020929190829003018186803b1580156112e657600080fd5b505afa1580156112fa573d6000803e3d6000fd5b505050506040513d602081101561131057600080fd5b50518111156113505760405162461bcd60e51b81526004018080602001828103825260308152602001806125126030913960400191505060405180910390fd5b6113646001600160a01b0387168883611d08565b610b566001600160a01b0387168261195b565b6000818152606560205260408120610b7a90611d5a565b60995490565b6000828152606560205260409020600201546113b2906107c86116cb565b61086d5760405162461bcd60e51b81526004018080602001828103825260308152602001806124036030913960400191505060405180910390fd5b60985490565b6113fe6000826107aa565b611410600061140b6116cb565b611394565b50565b600082820183811015610d70576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080611479836115c0565b905060006114906001600160a01b03831630611643565b9050806114a257600092505050610790565b61151d670de0b6b3a764000061075383856001600160a01b03166377c7b8fc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114eb57600080fd5b505afa1580156114ff573d6000803e3d6000fd5b505050506040513d602081101561151557600080fd5b505190611525565b949350505050565b60008261153457506000610b7a565b8282028284828161154157fe5b0414610d705760405162461bcd60e51b81526004018080602001828103825260218152602001806124336021913960400191505060405180910390fd5b6000610d7083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611d65565b60cc546040805163511a44ad60e01b81526001600160a01b0384811660048301529151600093929092169163511a44ad91602480820192602092909190829003018186803b15801561161157600080fd5b505afa158015611625573d6000803e3d6000fd5b505050506040513d602081101561163b57600080fd5b505192915050565b600080836001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561169357600080fd5b505afa1580156116a7573d6000803e3d6000fd5b505050506040513d60208110156116bd57600080fd5b5051905061151d848261195b565b3390565b60008281526065602052604090206116e79082611e07565b15610812576116f46116cb565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602052604090206117509082611e1c565b156108125761175d6116cb565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526117fb908590611e31565b50505050565b801580611887575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561185957600080fd5b505afa15801561186d573d6000803e3d6000fd5b505050506040513d602081101561188357600080fd5b5051155b6118c25760405162461bcd60e51b815260040180806020018281038252603681526020018061256c6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611914908490611e31565b505050565b6000610d7083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611ee2565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561199757600080fd5b505afa1580156119ab573d6000803e3d6000fd5b505050506040513d60208110156119c157600080fd5b50519050601260ff82161115611a11576040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c20646563696d616c7360801b604482015290519081900360640190fd5b60ff811660121415611a265782915050610b7a565b61151d8360ff601284900316600a0a611525565b6000610d708383611f3c565b6000610d70836001600160a01b038416611fa0565b303b1590565b600054610100900460ff1680611a7a5750611a7a611a5b565b80611a88575060005460ff16155b611ac35760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015611aee576000805460ff1961ff0019909116610100171660011790555b611b006000611afb6116cb565b610808565b7f6bc9af616991ee5669a4db9fdf1be40cf0f301aaa197206636e2f4b9a3c7af3b6097557f81349814bed7dfa157b76a21259a8d40c0afbebce228b6fa6309925210da2d6d6098557f172d99a02b0e57f8f6fa2be8cb376f24af61ff9401d1c478debdb285b6512b1f6099558015611410576000805461ff001916905550565b600054610100900460ff1680611b995750611b99611a5b565b80611ba7575060005460ff16155b611be25760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015611c0d576000805460ff1961ff0019909116610100171660011790555b611c15611fb8565b8015611410576000805461ff001916905550565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6557600080fd5b505afa158015611c79573d6000803e3d6000fd5b505050506040513d6020811015611c8f57600080fd5b50519050601260ff82161115611cdf576040805162461bcd60e51b815260206004820152601060248201526f696c6c6567616c20646563696d616c7360801b604482015290519081900360640190fd5b60ff811660121415611cf45782915050610b7a565b61151d8360ff601284900316600a0a61157e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611914908490611e31565b6000610b7a82612066565b60008183611df15760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611db6578181015183820152602001611d9e565b50505050905090810190601f168015611de35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611dfd57fe5b0495945050505050565b6000610d70836001600160a01b03841661206a565b6000610d70836001600160a01b0384166120b4565b6060611e86826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661217a9092919063ffffffff16565b80519091501561191457808060200190516020811015611ea557600080fd5b50516119145760405162461bcd60e51b815260040180806020018281038252602a815260200180612542602a913960400191505060405180910390fd5b60008184841115611f345760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611db6578181015183820152602001611d9e565b505050900390565b81546000908210611f7e5760405162461bcd60e51b81526004018080602001828103825260228152602001806122f86022913960400191505060405180910390fd5b826000018281548110611f8d57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b600054610100900460ff1680611fd15750611fd1611a5b565b80611fdf575060005460ff16155b61201a5760405162461bcd60e51b815260040180806020018281038252602e815260200180612454602e913960400191505060405180910390fd5b600054610100900460ff16158015612045576000805460ff1961ff0019909116610100171660011790555b609a805460ff191660011790558015611410576000805461ff001916905550565b5490565b60006120768383611fa0565b6120ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b7a565b506000610b7a565b6000818152600183016020526040812054801561217057835460001980830191908101906000908790839081106120e757fe5b906000526020600020015490508087600001848154811061210457fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061213457fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610b7a565b6000915050610b7a565b606061151d8484600085606061218f856122f1565b6121e0576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061221f5780518252601f199092019160209182019101612200565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612281576040519150601f19603f3d011682016040523d82523d6000602084013e612286565b606091505b5091509150811561229a57915061151d9050565b8051156122aa5780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611db6578181015183820152602001611d9e565b3b15159056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473596561726e5632496e746567726174696f6e2e696e766573743a20696e76657374206d7573742062652067726561746572207468616e2030416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74596561726e5632496e746567726174696f6e2e696e697469616c697a653a20686f6e657374436f6e66696775726174696f6e2061646472657373206d7573742062652076616c6964596561726e5632496e746567726174696f6e2e636f6c6c6563743a2063726564697473206d7573742062652067726561746572207468616e2030416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564596561726e5632496e746567726174696f6e2e696e766573743a206163636f756e74206d7573742062652076616c6964596561726e5632496e746567726174696f6e2e636f6c6c6563743a206163636f756e74206d7573742062652076616c6964416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865205661756c7420636f6e7472616374596561726e5632496e746567726174696f6e2e636f6c6c6563743a20696e73756666696369656e742062616c616e63655361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220fa18a7859535ca2e258c360691869c729db612c26bd2e0ce3739057c6ddd37c264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8128,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8131,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8196,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8121,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8241,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8237_storage)"
      },
      {
        "astId": 8486,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11733,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "_assetManagerRole",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 11735,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "_vaultRole",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 11737,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "_governorRole",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 9990,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "_notEntered",
        "offset": 0,
        "slot": "154",
        "type": "t_bool"
      },
      {
        "astId": 10031,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15310,
        "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
        "label": "_honestConfiguration",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8237_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8237_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)9778_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9777,
            "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9598_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)8237_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 8234,
            "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)9778_storage"
          },
          {
            "astId": 8236,
            "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)9598_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9593,
            "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9597,
            "contract": "contracts/integrations/YearnV2Integration.sol:YearnV2Integration",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1946800",
      "executionCost": "2062",
      "totalCost": "1948862"
    },
    "external": {
      "DEFAULT_ADMIN_ROLE()": "243",
      "assetManagerRole()": "1021",
      "balanceOf(address)": "infinite",
      "balances()": "infinite",
      "collect(address,address,uint256)": "infinite",
      "getRoleAdmin(bytes32)": "1180",
      "getRoleMember(bytes32,uint256)": "infinite",
      "getRoleMemberCount(bytes32)": "infinite",
      "governorRole()": "1064",
      "grantRole(bytes32,address)": "infinite",
      "hasRole(bytes32,address)": "infinite",
      "initialize(address)": "infinite",
      "invest(address,address,uint256)": "infinite",
      "priceOf(address)": "infinite",
      "renounceRole(bytes32,address)": "infinite",
      "revokeRole(bytes32,address)": "infinite",
      "shareOf(address)": "infinite",
      "shares()": "infinite",
      "totalBalance()": "infinite",
      "transferOwnership(address)": "infinite",
      "vaultRole()": "1108"
    },
    "internal": {
      "_balanceOf(address)": "infinite",
      "_contractOf(address)": "infinite"
    }
  }
}