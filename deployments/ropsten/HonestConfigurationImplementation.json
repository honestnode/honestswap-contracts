{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "activateBasketAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeBasketAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bAssetInvestment",
          "type": "address"
        }
      ],
      "name": "addBasketAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetManagerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "basketAssetInvestmentIntegration",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basketAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableRewardsPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "deactivateBasketAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governorRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "honestAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "bAssets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "bAssetInvestments",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableRewardsPercentage",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "removeBasketAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "setClaimableRewardsPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeRate",
          "type": "uint256"
        }
      ],
      "name": "setRedeemFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeRate",
          "type": "uint256"
        }
      ],
      "name": "setSwapFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x788A6D6Ec9dfd283810e93D0245e5Da283cfE7f1",
    "contractAddress": "0x0E71d0B477368649ad83fAEe824374eAF6Af5F84",
    "transactionIndex": 62,
    "gasUsed": "1796490",
    "logsBloom": "0x
    "blockHash": "0x22819a4bb504dc13cbd082fee6c3b1e156cb0712de74cad6e2b977a329dfd7c9",
    "transactionHash": "0x6245ce28f2bf1bc7d6006410aff567e9dc7356706d8de2c1e084e9440a1300d9",
    "logs": [],
    "blockNumber": 8915496,
    "cumulativeGasUsed": "5734846",
    "status": 1,
    "byzantium": true
  },
  "address": "0x0E71d0B477368649ad83fAEe824374eAF6Af5F84",
  "args": [],
  "solcInputHash": "0x57f8616e1b9f5e60b5dddddb3a19aaaa55edb00aeb2821c2b44dfb8838d95b70",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"activateBasketAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeBasketAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bAssetInvestment\",\"type\":\"address\"}],\"name\":\"addBasketAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetManagerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"basketAssetInvestmentIntegration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basketAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewardsPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"deactivateBasketAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"honestAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"bAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"bAssetInvestments\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableRewardsPercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"removeBasketAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setClaimableRewardsPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"setRedeemFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"setSwapFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HonestConfiguration.sol\":\"HonestConfiguration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3954a5ee18b9297616912390eac7b0fe698e6ffea5a50dc3ccb0980cae210e86\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7f6401708b61f575b497aa7c8118ca9d70348643c83c26e70d9b643edf1a95c1\"},\"contracts/AbstractHonestContract.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {Initializable} from '@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol';\\nimport {AccessControlUpgradeSafe} from '@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol';\\n\\nabstract contract AbstractHonestContract is Initializable, AccessControlUpgradeSafe {\\n\\n    bytes32 private _assetManagerRole;\\n    bytes32 private _vaultRole;\\n    bytes32 private _governorRole;\\n\\n    function initialize() internal initializer() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _assetManagerRole = keccak256(\\\"HONEST_ASSET_MANAGER\\\");\\n        _vaultRole = keccak256(\\\"HONEST_VAULT\\\");\\n        _governorRole = keccak256(\\\"HONEST_GOVERNOR\\\");\\n    }\\n\\n    function assetManagerRole() external view returns (bytes32) {\\n        return _assetManagerRole;\\n    }\\n\\n    function vaultRole() external view returns (bytes32) {\\n        return _vaultRole;\\n    }\\n\\n    function governorRole() external view returns (bytes32) {\\n        return _governorRole;\\n    }\\n\\n    function transferOwnership(address to) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, to);\\n        revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    modifier onlyAssetManager {\\n        require(hasRole(_assetManagerRole, msg.sender), \\\"AccessControl: caller is not the AssetManager contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault {\\n        require(hasRole(_vaultRole, msg.sender), \\\"AccessControl: caller is not the Vault contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"AccessControl: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xd7ca371f8f4f7da00029e7634468c9cc6f24314c26b2080387397d3dfab6e66e\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/HonestConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {EnumerableSet} from '@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol';\\nimport {AbstractHonestContract} from \\\"./AbstractHonestContract.sol\\\";\\nimport {IHonestConfiguration} from \\\"./interfaces/IHonestConfiguration.sol\\\";\\n\\ncontract HonestConfiguration is IHonestConfiguration, AbstractHonestContract {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address private _honestAsset;\\n\\n    EnumerableSet.AddressSet private _basketAssets;\\n\\n    mapping(address => bool) private _basketAssetStates;\\n\\n    mapping(address => address) _basketInvestments;\\n\\n    uint private _activeBasketAssetsLength;\\n\\n    uint private _swapFeeRate;\\n\\n    uint private _redeemFeeRate;\\n\\n    uint private _claimableRewardsPercentage;\\n\\n    function initialize(address asset, address[] calldata bAssets, address[] calldata bAssetInvestments, uint swapFeeRate, uint redeemFeeRate, uint claimableRewardsPercentage) external initializer() {\\n        require(asset != address(0), 'HonestConfiguration.initialize: asset must be valid');\\n        require(bAssets.length > 0, 'HonestConfiguration.initialize: basket assets length must be greater than 0');\\n        require(bAssets.length == bAssetInvestments.length, 'HonestConfiguration.initialize: mismatch basket assets and investments length');\\n        require(swapFeeRate < uint(1e18), 'HonestConfiguration.initialize: swap fee rate should be less than 1');\\n        require(redeemFeeRate < uint(1e18), 'HonestConfiguration.initialize: redeem fee rate should be less than 1');\\n        require(claimableRewardsPercentage < uint(1e18), 'HonestConfiguration.initialize: claimable percentage should be less than 1');\\n\\n        super.initialize();\\n        _honestAsset = asset;\\n        for (uint i; i < bAssets.length; ++i) {\\n            require(bAssets[i] != address(0), 'HonestConfiguration.initialize: basket asset must be valid');\\n            require(bAssetInvestments[i] != address(0), 'HonestConfiguration.initialize: basket asset investment integration must be valid');\\n\\n            _basketAssets.add(bAssets[i]);\\n            _basketAssetStates[bAssets[i]] = true;\\n            _basketInvestments[bAssets[i]] = bAssetInvestments[i];\\n            ++_activeBasketAssetsLength;\\n        }\\n        _swapFeeRate = swapFeeRate;\\n        _redeemFeeRate = redeemFeeRate;\\n        _claimableRewardsPercentage = claimableRewardsPercentage;\\n    }\\n\\n    function honestAsset() external override view returns (address) {\\n        return _honestAsset;\\n    }\\n\\n    function basketAssets() external override view returns (address[] memory, bool[] memory) {\\n        address[] memory assets = new address[](_basketAssets.length());\\n        bool[] memory states = new bool[](_basketAssets.length());\\n        for (uint i; i < _basketAssets.length(); ++i) {\\n            assets[i] = _basketAssets.at(i);\\n            states[i] = _basketAssetStates[assets[i]];\\n        }\\n        return (assets, states);\\n    }\\n\\n    function activeBasketAssets() external override view returns (address[] memory) {\\n        address[] memory assets = new address[](_activeBasketAssetsLength);\\n        if (_activeBasketAssetsLength == 0) {\\n            return assets;\\n        }\\n        uint j;\\n        for (uint i; i < _basketAssets.length(); ++i) {\\n            if (_basketAssetStates[_basketAssets.at(i)]) {\\n                assets[j] = _basketAssets.at(i);\\n                ++j;\\n            }\\n        }\\n        return assets;\\n    }\\n\\n    function basketAssetInvestmentIntegration(address asset) external override view returns (address) {\\n        require(_basketAssets.contains(asset), 'HonestConfiguration.basketAssetPriceIntegration: invalid basket asset');\\n        require(_basketAssetStates[asset], 'HonestConfiguration.basketAssetPriceIntegration: basket asset is not active');\\n\\n        return _basketInvestments[asset];\\n    }\\n\\n    function swapFeeRate() external override view returns (uint) {\\n        return _swapFeeRate;\\n    }\\n\\n    function redeemFeeRate() external override view returns (uint) {\\n        return _redeemFeeRate;\\n    }\\n\\n    function claimableRewardsPercentage() external override view returns (uint) {\\n        return _claimableRewardsPercentage;\\n    }\\n\\n    function addBasketAsset(address asset, address bAssetInvestment) external override onlyOwner {\\n        require(asset != address(0), 'HonestConfiguration.addBasketAsset: basket asset must be valid');\\n        require(bAssetInvestment != address(0), 'HonestConfiguration.addBasketAsset: basket asset investment integration must be valid');\\n\\n        if (!_basketAssets.contains(asset)) {\\n            _basketAssets.add(asset);\\n            _basketAssetStates[asset] = true;\\n            _basketInvestments[asset] = bAssetInvestment;\\n            ++_activeBasketAssetsLength;\\n        }\\n    }\\n\\n    function removeBasketAsset(address asset) external override onlyOwner {\\n        require(asset != address(0), 'HonestConfiguration.removeBasketAsset: basket asset must be valid');\\n\\n        if (_basketAssets.contains(asset)) {\\n            _basketAssets.remove(asset);\\n            if (_basketAssetStates[asset]) {\\n                --_activeBasketAssetsLength;\\n            }\\n            delete _basketAssetStates[asset];\\n            delete _basketInvestments[asset];\\n        }\\n    }\\n\\n    function activateBasketAsset(address asset) external override onlyOwner {\\n        require(asset != address(0), 'HonestConfiguration.activateBasketAsset: basket asset must be valid');\\n\\n        if (_basketAssets.contains(asset) && !_basketAssetStates[asset]) {\\n            _basketAssetStates[asset] = true;\\n            ++_activeBasketAssetsLength;\\n        }\\n    }\\n\\n    function deactivateBasketAsset(address asset) external override onlyOwner {\\n        require(asset != address(0), 'HonestConfiguration.deactivateBasketAsset: basket asset must be valid');\\n\\n        if (_basketAssets.contains(asset) && _basketAssetStates[asset]) {\\n            _basketAssetStates[asset] = false;\\n            --_activeBasketAssetsLength;\\n        }\\n    }\\n\\n    function setSwapFeeRate(uint feeRate) external override onlyOwner {\\n        require(feeRate < uint(1e18), 'HonestConfiguration.setSwapFeeRate: swap fee rate should be less than 1');\\n\\n        _swapFeeRate = feeRate;\\n    }\\n\\n    function setRedeemFeeRate(uint feeRate) external override onlyOwner {\\n        require(feeRate < uint(1e18), 'HonestConfiguration.setRedeemFeeRate: redeem fee rate should be less than 1');\\n\\n        _redeemFeeRate = feeRate;\\n    }\\n\\n\\n    function setClaimableRewardsPercentage(uint percentage) external override onlyOwner {\\n        require(percentage < uint(1e18), 'HonestConfiguration.setHonestAssetRewardsPercentage: claimable percentage should be less than 1');\\n\\n        _claimableRewardsPercentage = percentage;\\n    }\\n}\",\"keccak256\":\"0x156e5eabbc9125f452b3bdf3112ff31b62d369f53e46defb6ac0e05276282cb3\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/integrations/IAssetPriceIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\ninterface IAssetPriceIntegration {\\n\\n    enum FeedsTarget {USD, ETH}\\n\\n    function honestConfiguration() external view returns (address);\\n\\n    function ethPriceFeeds() external view returns (address);\\n\\n    function getPrice(address asset) external view returns (uint);\\n\\n    function getPrices(address[] calldata assets) external view returns (uint[] memory);\\n}\",\"keccak256\":\"0xa351ba6b2e7b7a2990f40bc9d9f59fd2ea395006ccb9e55e0fa9776220cf7c05\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/interfaces/IHonestConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport {IAssetPriceIntegration} from '../integrations/IAssetPriceIntegration.sol';\\n\\ninterface IHonestConfiguration {\\n\\n    function honestAsset() external view returns (address);\\n\\n    function basketAssets() external view returns (address[] memory, bool[] memory);\\n\\n    function activeBasketAssets() external view returns (address[] memory);\\n\\n    function basketAssetInvestmentIntegration(address asset) external view returns (address);\\n\\n    function swapFeeRate() external view returns (uint);\\n\\n    function redeemFeeRate() external view returns (uint);\\n\\n    function claimableRewardsPercentage() external view returns (uint);\\n\\n    function addBasketAsset(address asset, address bAssetInvestment) external;\\n\\n    function removeBasketAsset(address asset) external;\\n\\n    function activateBasketAsset(address asset) external;\\n\\n    function deactivateBasketAsset(address asset) external;\\n\\n    function setSwapFeeRate(uint feeRate) external;\\n\\n    function setRedeemFeeRate(uint feeRate) external;\\n\\n    function setClaimableRewardsPercentage(uint percentage) external;\\n}\",\"keccak256\":\"0xedc2dffa10254d4d08690346e3a598e5c80c36898c971bfe33835770b9984747\",\"license\":\"LGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611f87806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063772b92a8116100f9578063c5457d3311610097578063d1154ff011610071578063d1154ff0146105e2578063d547741f146105ff578063eaf896fd1461062b578063f2fde38b14610633576101a9565b8063c5457d33146105a0578063ca15c873146105bd578063ce16489e146105da576101a9565b80639010d07c116100d35780639010d07c146104dd57806391d1485414610500578063a217fddf14610540578063c00544e714610548576101a9565b8063772b92a81461048957806386cfa120146104af5780638ade531e146104b7576101a9565b806336568abe1161016657806349dcd6a11161014057806349dcd6a114610359578063511a44ad146103615780635872e6fa146103a35780635dfbc2c5146103ab576101a9565b806336568abe146102845780633a04801d146102b0578063420394b2146102b8576101a9565b80631c0baa0f146101ae57806321e822c5146101de578063248a9ca3146101fb57806327de5bda1461022a57806328f88c88146102325780632f2ff15d14610258575b600080fd5b6101dc600480360360408110156101c457600080fd5b506001600160a01b0381358116916020013516610659565b005b6101dc600480360360208110156101f457600080fd5b503561079b565b6102186004803603602081101561021157600080fd5b503561082c565b60408051918252519081900360200190f35b610218610841565b6101dc6004803603602081101561024857600080fd5b50356001600160a01b0316610848565b6101dc6004803603604081101561026e57600080fd5b50803590602001356001600160a01b0316610957565b6101dc6004803603604081101561029a57600080fd5b50803590602001356001600160a01b03166109bf565b610218610a20565b6102c0610a26565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103045781810151838201526020016102ec565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561034357818101518382015260200161032b565b5050505090500194505050505060405180910390f35b610218610b86565b6103876004803603602081101561037757600080fd5b50356001600160a01b0316610b8c565b604080516001600160a01b039092168252519081900360200190f35b610218610c4a565b6101dc600480360360c08110156103c157600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156103ec57600080fd5b8201836020820111156103fe57600080fd5b8035906020019184602083028401116401000000008311171561042057600080fd5b91939092909160208101903564010000000081111561043e57600080fd5b82018360208201111561045057600080fd5b8035906020019184602083028401116401000000008311171561047257600080fd5b919350915080359060208101359060400135610c50565b6101dc6004803603602081101561049f57600080fd5b50356001600160a01b0316611096565b610387611186565b6101dc600480360360208110156104cd57600080fd5b50356001600160a01b0316611195565b610387600480360360408110156104f357600080fd5b508035906020013561127f565b61052c6004803603604081101561051657600080fd5b50803590602001356001600160a01b03166112a0565b604080519115158252519081900360200190f35b6102186112b8565b6105506112bd565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561058c578181015183820152602001610574565b505050509050019250505060405180910390f35b6101dc600480360360208110156105b657600080fd5b50356113ac565b610218600480360360208110156105d357600080fd5b503561143d565b610218611454565b6101dc600480360360208110156105f857600080fd5b503561145a565b6101dc6004803603604081101561061557600080fd5b50803590602001356001600160a01b03166114eb565b610218611544565b6101dc6004803603602081101561064957600080fd5b50356001600160a01b031661154a565b6106646000336112a0565b61069f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0382166106e45760405162461bcd60e51b815260040180806020018281038252603e815260200180611bf6603e913960400191505060405180910390fd5b6001600160a01b0381166107295760405162461bcd60e51b8152600401808060200182810382526055815260200180611ea86055913960600191505060405180910390fd5b610734609b83611567565b61079757610743609b8361157c565b506001600160a01b038281166000908152609d602090815260408083208054600160ff199091168117909155609e90925290912080546001600160a01b03191692841692909217909155609f805490910190555b5050565b6107a66000336112a0565b6107e15760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b670de0b6b3a764000081106108275760405162461bcd60e51b815260040180806020018281038252604b815260200180611ca8604b913960600191505060405180910390fd5b60a155565b60009081526065602052604090206002015490565b60a2545b90565b6108536000336112a0565b61088e5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0381166108d35760405162461bcd60e51b8152600401808060200182810382526041815260200180611c676041913960600191505060405180910390fd5b6108de609b82611567565b15610954576108ee609b82611591565b506001600160a01b0381166000908152609d602052604090205460ff161561091b57609f80546000190190555b6001600160a01b0381166000908152609d60209081526040808320805460ff19169055609e909152902080546001600160a01b03191690555b50565b60008281526065602052604090206002015461097a906109756115a6565b6112a0565b6109b55760405162461bcd60e51b815260040180806020018281038252602f8152602001806119f8602f913960400191505060405180910390fd5b61079782826115aa565b6109c76115a6565b6001600160a01b0316816001600160a01b031614610a165760405162461bcd60e51b815260040180806020018281038252602f815260200180611f23602f913960400191505060405180910390fd5b6107978282611613565b60a05490565b6060806060610a35609b61167c565b67ffffffffffffffff81118015610a4b57600080fd5b50604051908082528060200260200182016040528015610a75578160200160208202803683370190505b5090506060610a84609b61167c565b67ffffffffffffffff81118015610a9a57600080fd5b50604051908082528060200260200182016040528015610ac4578160200160208202803683370190505b50905060005b610ad4609b61167c565b811015610b7c57610ae6609b82611687565b838281518110610af257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050609d6000848381518110610b2257fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff16828281518110610b6457fe5b91151560209283029190910190910152600101610aca565b5090925090509091565b60975490565b6000610b99609b83611567565b610bd45760405162461bcd60e51b8152600401808060200182810382526045815260200180611af96045913960600191505060405180910390fd5b6001600160a01b0382166000908152609d602052604090205460ff16610c2b5760405162461bcd60e51b815260040180806020018281038252604b815260200180611dfe604b913960600191505060405180910390fd5b506001600160a01b039081166000908152609e60205260409020541690565b60a15490565b600054610100900460ff1680610c695750610c69611693565b80610c77575060005460ff16155b610cb25760405162461bcd60e51b815260040180806020018281038252602e815260200180611cf3602e913960400191505060405180910390fd5b600054610100900460ff16158015610cdd576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038916610d225760405162461bcd60e51b8152600401808060200182810382526033815260200180611c346033913960400191505060405180910390fd5b86610d5e5760405162461bcd60e51b815260040180806020018281038252604b815260200180611d21604b913960600191505060405180910390fd5b868514610d9c5760405162461bcd60e51b815260040180806020018281038252604d815260200180611d6c604d913960600191505060405180910390fd5b670de0b6b3a76400008410610de25760405162461bcd60e51b8152600401808060200182810382526043815260200180611bb36043913960600191505060405180910390fd5b670de0b6b3a76400008310610e285760405162461bcd60e51b8152600401808060200182810382526045815260200180611db96045913960600191505060405180910390fd5b670de0b6b3a76400008210610e6e5760405162461bcd60e51b815260040180806020018281038252604a8152602001806119ae604a913960600191505060405180910390fd5b610e76611699565b609a80546001600160a01b0319166001600160a01b038b1617905560005b87811015611069576000898983818110610eaa57fe5b905060200201356001600160a01b03166001600160a01b03161415610f005760405162461bcd60e51b815260040180806020018281038252603a815260200180611a78603a913960400191505060405180910390fd5b6000878783818110610f0e57fe5b905060200201356001600160a01b03166001600160a01b03161415610f645760405162461bcd60e51b8152600401808060200182810382526051815260200180611a276051913960600191505060405180910390fd5b610f93898983818110610f7357fe5b905060200201356001600160a01b0316609b61157c90919063ffffffff16565b506001609d60008b8b85818110610fa657fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550868682818110610ff957fe5b905060200201356001600160a01b0316609e60008b8b8581811061101957fe5b6001600160a01b03602091820293909301358316845283019390935260409091016000208054939091166001600160a01b03199093169290921790915550609f8054600190810190915501610e94565b5060a084905560a183905560a2829055801561108b576000805461ff00191690555b505050505050505050565b6110a16000336112a0565b6110dc5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0381166111215760405162461bcd60e51b815260040180806020018281038252604381526020018061196b6043913960600191505060405180910390fd5b61112c609b82611567565b801561115157506001600160a01b0381166000908152609d602052604090205460ff16155b15610954576001600160a01b03166000908152609d60205260409020805460ff19166001908117909155609f80549091019055565b609a546001600160a01b031690565b6111a06000336112a0565b6111db5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0381166112205760405162461bcd60e51b8152600401808060200182810382526045815260200180611b3e6045913960600191505060405180910390fd5b61122b609b82611567565b801561124f57506001600160a01b0381166000908152609d602052604090205460ff165b15610954576001600160a01b03166000908152609d60205260409020805460ff19169055609f8054600019019055565b60008281526065602052604081206112979083611687565b90505b92915050565b60008281526065602052604081206112979083611567565b600081565b606080609f5467ffffffffffffffff811180156112d957600080fd5b50604051908082528060200260200182016040528015611303578160200160208202803683370190505b509050609f5460001415611318579050610845565b6000805b611326609b61167c565b8110156113a457609d600061133c609b84611687565b6001600160a01b0316815260208101919091526040016000205460ff161561139c57611369609b82611687565b83838151811061137557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508160010191505b60010161131c565b509091505090565b6113b76000336112a0565b6113f25760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b670de0b6b3a764000081106114385760405162461bcd60e51b815260040180806020018281038252605f815260200180611e49605f913960600191505060405180910390fd5b60a255565b600081815260656020526040812061129a9061167c565b60995490565b6114656000336112a0565b6114a05760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b670de0b6b3a764000081106114e65760405162461bcd60e51b8152600401808060200182810382526047815260200180611ab26047913960600191505060405180910390fd5b60a055565b600082815260656020526040902060020154611509906109756115a6565b610a165760405162461bcd60e51b8152600401808060200182810382526030815260200180611b836030913960400191505060405180910390fd5b60985490565b611555600082610957565b61095460006115626115a6565b6114eb565b6000611297836001600160a01b0384166117b8565b6000611297836001600160a01b0384166117d0565b6000611297836001600160a01b03841661181a565b3390565b60008281526065602052604090206115c2908261157c565b15610797576115cf6115a6565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020526040902061162b9082611591565b15610797576116386115a6565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061129a826118e0565b600061129783836118e4565b303b1590565b600054610100900460ff16806116b257506116b2611693565b806116c0575060005460ff16155b6116fb5760405162461bcd60e51b815260040180806020018281038252602e815260200180611cf3602e913960400191505060405180910390fd5b600054610100900460ff16158015611726576000805460ff1961ff0019909116610100171660011790555b61173860006117336115a6565b6109b5565b7f6bc9af616991ee5669a4db9fdf1be40cf0f301aaa197206636e2f4b9a3c7af3b6097557f81349814bed7dfa157b76a21259a8d40c0afbebce228b6fa6309925210da2d6d6098557f172d99a02b0e57f8f6fa2be8cb376f24af61ff9401d1c478debdb285b6512b1f6099558015610954576000805461ff001916905550565b60009081526001919091016020526040902054151590565b60006117dc83836117b8565b6118125750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561129a565b50600061129a565b600081815260018301602052604081205480156118d6578354600019808301919081019060009087908390811061184d57fe5b906000526020600020015490508087600001848154811061186a57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061189a57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061129a565b600091505061129a565b5490565b815460009082106119265760405162461bcd60e51b81526004018080602001828103825260228152602001806119496022913960400191505060405180910390fd5b82600001828154811061193557fe5b906000526020600020015490509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473486f6e657374436f6e66696775726174696f6e2e61637469766174654261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a20636c61696d61626c652070657263656e746167652073686f756c64206265206c657373207468616e2031416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206261736b657420617373657420696e766573746d656e7420696e746567726174696f6e206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e73657453776170466565526174653a20737761702066656520726174652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6261736b657441737365745072696365496e746567726174696f6e3a20696e76616c6964206261736b6574206173736574486f6e657374436f6e66696775726174696f6e2e646561637469766174654261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a20737761702066656520726174652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6164644261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e72656d6f76654261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e73657452656465656d466565526174653a2072656465656d2066656520726174652073686f756c64206265206c657373207468616e2031436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206261736b657420617373657473206c656e677468206d7573742062652067726561746572207468616e2030486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206d69736d61746368206261736b65742061737365747320616e6420696e766573746d656e7473206c656e677468486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a2072656465656d2066656520726174652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6261736b657441737365745072696365496e746567726174696f6e3a206261736b6574206173736574206973206e6f7420616374697665486f6e657374436f6e66696775726174696f6e2e736574486f6e65737441737365745265776172647350657263656e746167653a20636c61696d61626c652070657263656e746167652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6164644261736b657441737365743a206261736b657420617373657420696e766573746d656e7420696e746567726174696f6e206d7573742062652076616c6964416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865206f776e6572416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220b687e65c4ccfdd6feb5a9dfced84d40f0b6e05c7c2459b370d29f768ec6dbe9664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063772b92a8116100f9578063c5457d3311610097578063d1154ff011610071578063d1154ff0146105e2578063d547741f146105ff578063eaf896fd1461062b578063f2fde38b14610633576101a9565b8063c5457d33146105a0578063ca15c873146105bd578063ce16489e146105da576101a9565b80639010d07c116100d35780639010d07c146104dd57806391d1485414610500578063a217fddf14610540578063c00544e714610548576101a9565b8063772b92a81461048957806386cfa120146104af5780638ade531e146104b7576101a9565b806336568abe1161016657806349dcd6a11161014057806349dcd6a114610359578063511a44ad146103615780635872e6fa146103a35780635dfbc2c5146103ab576101a9565b806336568abe146102845780633a04801d146102b0578063420394b2146102b8576101a9565b80631c0baa0f146101ae57806321e822c5146101de578063248a9ca3146101fb57806327de5bda1461022a57806328f88c88146102325780632f2ff15d14610258575b600080fd5b6101dc600480360360408110156101c457600080fd5b506001600160a01b0381358116916020013516610659565b005b6101dc600480360360208110156101f457600080fd5b503561079b565b6102186004803603602081101561021157600080fd5b503561082c565b60408051918252519081900360200190f35b610218610841565b6101dc6004803603602081101561024857600080fd5b50356001600160a01b0316610848565b6101dc6004803603604081101561026e57600080fd5b50803590602001356001600160a01b0316610957565b6101dc6004803603604081101561029a57600080fd5b50803590602001356001600160a01b03166109bf565b610218610a20565b6102c0610a26565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156103045781810151838201526020016102ec565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561034357818101518382015260200161032b565b5050505090500194505050505060405180910390f35b610218610b86565b6103876004803603602081101561037757600080fd5b50356001600160a01b0316610b8c565b604080516001600160a01b039092168252519081900360200190f35b610218610c4a565b6101dc600480360360c08110156103c157600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156103ec57600080fd5b8201836020820111156103fe57600080fd5b8035906020019184602083028401116401000000008311171561042057600080fd5b91939092909160208101903564010000000081111561043e57600080fd5b82018360208201111561045057600080fd5b8035906020019184602083028401116401000000008311171561047257600080fd5b919350915080359060208101359060400135610c50565b6101dc6004803603602081101561049f57600080fd5b50356001600160a01b0316611096565b610387611186565b6101dc600480360360208110156104cd57600080fd5b50356001600160a01b0316611195565b610387600480360360408110156104f357600080fd5b508035906020013561127f565b61052c6004803603604081101561051657600080fd5b50803590602001356001600160a01b03166112a0565b604080519115158252519081900360200190f35b6102186112b8565b6105506112bd565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561058c578181015183820152602001610574565b505050509050019250505060405180910390f35b6101dc600480360360208110156105b657600080fd5b50356113ac565b610218600480360360208110156105d357600080fd5b503561143d565b610218611454565b6101dc600480360360208110156105f857600080fd5b503561145a565b6101dc6004803603604081101561061557600080fd5b50803590602001356001600160a01b03166114eb565b610218611544565b6101dc6004803603602081101561064957600080fd5b50356001600160a01b031661154a565b6106646000336112a0565b61069f5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0382166106e45760405162461bcd60e51b815260040180806020018281038252603e815260200180611bf6603e913960400191505060405180910390fd5b6001600160a01b0381166107295760405162461bcd60e51b8152600401808060200182810382526055815260200180611ea86055913960600191505060405180910390fd5b610734609b83611567565b61079757610743609b8361157c565b506001600160a01b038281166000908152609d602090815260408083208054600160ff199091168117909155609e90925290912080546001600160a01b03191692841692909217909155609f805490910190555b5050565b6107a66000336112a0565b6107e15760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b670de0b6b3a764000081106108275760405162461bcd60e51b815260040180806020018281038252604b815260200180611ca8604b913960600191505060405180910390fd5b60a155565b60009081526065602052604090206002015490565b60a2545b90565b6108536000336112a0565b61088e5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0381166108d35760405162461bcd60e51b8152600401808060200182810382526041815260200180611c676041913960600191505060405180910390fd5b6108de609b82611567565b15610954576108ee609b82611591565b506001600160a01b0381166000908152609d602052604090205460ff161561091b57609f80546000190190555b6001600160a01b0381166000908152609d60209081526040808320805460ff19169055609e909152902080546001600160a01b03191690555b50565b60008281526065602052604090206002015461097a906109756115a6565b6112a0565b6109b55760405162461bcd60e51b815260040180806020018281038252602f8152602001806119f8602f913960400191505060405180910390fd5b61079782826115aa565b6109c76115a6565b6001600160a01b0316816001600160a01b031614610a165760405162461bcd60e51b815260040180806020018281038252602f815260200180611f23602f913960400191505060405180910390fd5b6107978282611613565b60a05490565b6060806060610a35609b61167c565b67ffffffffffffffff81118015610a4b57600080fd5b50604051908082528060200260200182016040528015610a75578160200160208202803683370190505b5090506060610a84609b61167c565b67ffffffffffffffff81118015610a9a57600080fd5b50604051908082528060200260200182016040528015610ac4578160200160208202803683370190505b50905060005b610ad4609b61167c565b811015610b7c57610ae6609b82611687565b838281518110610af257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050609d6000848381518110610b2257fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff16828281518110610b6457fe5b91151560209283029190910190910152600101610aca565b5090925090509091565b60975490565b6000610b99609b83611567565b610bd45760405162461bcd60e51b8152600401808060200182810382526045815260200180611af96045913960600191505060405180910390fd5b6001600160a01b0382166000908152609d602052604090205460ff16610c2b5760405162461bcd60e51b815260040180806020018281038252604b815260200180611dfe604b913960600191505060405180910390fd5b506001600160a01b039081166000908152609e60205260409020541690565b60a15490565b600054610100900460ff1680610c695750610c69611693565b80610c77575060005460ff16155b610cb25760405162461bcd60e51b815260040180806020018281038252602e815260200180611cf3602e913960400191505060405180910390fd5b600054610100900460ff16158015610cdd576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038916610d225760405162461bcd60e51b8152600401808060200182810382526033815260200180611c346033913960400191505060405180910390fd5b86610d5e5760405162461bcd60e51b815260040180806020018281038252604b815260200180611d21604b913960600191505060405180910390fd5b868514610d9c5760405162461bcd60e51b815260040180806020018281038252604d815260200180611d6c604d913960600191505060405180910390fd5b670de0b6b3a76400008410610de25760405162461bcd60e51b8152600401808060200182810382526043815260200180611bb36043913960600191505060405180910390fd5b670de0b6b3a76400008310610e285760405162461bcd60e51b8152600401808060200182810382526045815260200180611db96045913960600191505060405180910390fd5b670de0b6b3a76400008210610e6e5760405162461bcd60e51b815260040180806020018281038252604a8152602001806119ae604a913960600191505060405180910390fd5b610e76611699565b609a80546001600160a01b0319166001600160a01b038b1617905560005b87811015611069576000898983818110610eaa57fe5b905060200201356001600160a01b03166001600160a01b03161415610f005760405162461bcd60e51b815260040180806020018281038252603a815260200180611a78603a913960400191505060405180910390fd5b6000878783818110610f0e57fe5b905060200201356001600160a01b03166001600160a01b03161415610f645760405162461bcd60e51b8152600401808060200182810382526051815260200180611a276051913960600191505060405180910390fd5b610f93898983818110610f7357fe5b905060200201356001600160a01b0316609b61157c90919063ffffffff16565b506001609d60008b8b85818110610fa657fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550868682818110610ff957fe5b905060200201356001600160a01b0316609e60008b8b8581811061101957fe5b6001600160a01b03602091820293909301358316845283019390935260409091016000208054939091166001600160a01b03199093169290921790915550609f8054600190810190915501610e94565b5060a084905560a183905560a2829055801561108b576000805461ff00191690555b505050505050505050565b6110a16000336112a0565b6110dc5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0381166111215760405162461bcd60e51b815260040180806020018281038252604381526020018061196b6043913960600191505060405180910390fd5b61112c609b82611567565b801561115157506001600160a01b0381166000908152609d602052604090205460ff16155b15610954576001600160a01b03166000908152609d60205260409020805460ff19166001908117909155609f80549091019055565b609a546001600160a01b031690565b6111a06000336112a0565b6111db5760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b6001600160a01b0381166112205760405162461bcd60e51b8152600401808060200182810382526045815260200180611b3e6045913960600191505060405180910390fd5b61122b609b82611567565b801561124f57506001600160a01b0381166000908152609d602052604090205460ff165b15610954576001600160a01b03166000908152609d60205260409020805460ff19169055609f8054600019019055565b60008281526065602052604081206112979083611687565b90505b92915050565b60008281526065602052604081206112979083611567565b600081565b606080609f5467ffffffffffffffff811180156112d957600080fd5b50604051908082528060200260200182016040528015611303578160200160208202803683370190505b509050609f5460001415611318579050610845565b6000805b611326609b61167c565b8110156113a457609d600061133c609b84611687565b6001600160a01b0316815260208101919091526040016000205460ff161561139c57611369609b82611687565b83838151811061137557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508160010191505b60010161131c565b509091505090565b6113b76000336112a0565b6113f25760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b670de0b6b3a764000081106114385760405162461bcd60e51b815260040180806020018281038252605f815260200180611e49605f913960600191505060405180910390fd5b60a255565b600081815260656020526040812061129a9061167c565b60995490565b6114656000336112a0565b6114a05760405162461bcd60e51b8152600401808060200182810382526026815260200180611efd6026913960400191505060405180910390fd5b670de0b6b3a764000081106114e65760405162461bcd60e51b8152600401808060200182810382526047815260200180611ab26047913960600191505060405180910390fd5b60a055565b600082815260656020526040902060020154611509906109756115a6565b610a165760405162461bcd60e51b8152600401808060200182810382526030815260200180611b836030913960400191505060405180910390fd5b60985490565b611555600082610957565b61095460006115626115a6565b6114eb565b6000611297836001600160a01b0384166117b8565b6000611297836001600160a01b0384166117d0565b6000611297836001600160a01b03841661181a565b3390565b60008281526065602052604090206115c2908261157c565b15610797576115cf6115a6565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020526040902061162b9082611591565b15610797576116386115a6565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061129a826118e0565b600061129783836118e4565b303b1590565b600054610100900460ff16806116b257506116b2611693565b806116c0575060005460ff16155b6116fb5760405162461bcd60e51b815260040180806020018281038252602e815260200180611cf3602e913960400191505060405180910390fd5b600054610100900460ff16158015611726576000805460ff1961ff0019909116610100171660011790555b61173860006117336115a6565b6109b5565b7f6bc9af616991ee5669a4db9fdf1be40cf0f301aaa197206636e2f4b9a3c7af3b6097557f81349814bed7dfa157b76a21259a8d40c0afbebce228b6fa6309925210da2d6d6098557f172d99a02b0e57f8f6fa2be8cb376f24af61ff9401d1c478debdb285b6512b1f6099558015610954576000805461ff001916905550565b60009081526001919091016020526040902054151590565b60006117dc83836117b8565b6118125750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561129a565b50600061129a565b600081815260018301602052604081205480156118d6578354600019808301919081019060009087908390811061184d57fe5b906000526020600020015490508087600001848154811061186a57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061189a57fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061129a565b600091505061129a565b5490565b815460009082106119265760405162461bcd60e51b81526004018080602001828103825260228152602001806119496022913960400191505060405180910390fd5b82600001828154811061193557fe5b906000526020600020015490509291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473486f6e657374436f6e66696775726174696f6e2e61637469766174654261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a20636c61696d61626c652070657263656e746167652073686f756c64206265206c657373207468616e2031416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206261736b657420617373657420696e766573746d656e7420696e746567726174696f6e206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e73657453776170466565526174653a20737761702066656520726174652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6261736b657441737365745072696365496e746567726174696f6e3a20696e76616c6964206261736b6574206173736574486f6e657374436f6e66696775726174696f6e2e646561637469766174654261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a20737761702066656520726174652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6164644261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e72656d6f76654261736b657441737365743a206261736b6574206173736574206d7573742062652076616c6964486f6e657374436f6e66696775726174696f6e2e73657452656465656d466565526174653a2072656465656d2066656520726174652073686f756c64206265206c657373207468616e2031436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206261736b657420617373657473206c656e677468206d7573742062652067726561746572207468616e2030486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a206d69736d61746368206261736b65742061737365747320616e6420696e766573746d656e7473206c656e677468486f6e657374436f6e66696775726174696f6e2e696e697469616c697a653a2072656465656d2066656520726174652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6261736b657441737365745072696365496e746567726174696f6e3a206261736b6574206173736574206973206e6f7420616374697665486f6e657374436f6e66696775726174696f6e2e736574486f6e65737441737365745265776172647350657263656e746167653a20636c61696d61626c652070657263656e746167652073686f756c64206265206c657373207468616e2031486f6e657374436f6e66696775726174696f6e2e6164644261736b657441737365743a206261736b657420617373657420696e766573746d656e7420696e746567726174696f6e206d7573742062652076616c6964416363657373436f6e74726f6c3a2063616c6c6572206973206e6f7420746865206f776e6572416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220b687e65c4ccfdd6feb5a9dfced84d40f0b6e05c7c2459b370d29f768ec6dbe9664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8128,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8131,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8196,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8121,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8241,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8237_storage)"
      },
      {
        "astId": 8486,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11733,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_assetManagerRole",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 11735,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_vaultRole",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 11737,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_governorRole",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 12531,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_honestAsset",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 12533,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_basketAssets",
        "offset": 0,
        "slot": "155",
        "type": "t_struct(AddressSet)9778_storage"
      },
      {
        "astId": 12537,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_basketAssetStates",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12541,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_basketInvestments",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 12543,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_activeBasketAssetsLength",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 12545,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_swapFeeRate",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 12547,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_redeemFeeRate",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 12549,
        "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
        "label": "_claimableRewardsPercentage",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8237_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeSafe.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8237_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)9778_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9777,
            "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9598_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)8237_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeSafe.RoleData",
        "members": [
          {
            "astId": 8234,
            "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)9778_storage"
          },
          {
            "astId": 8236,
            "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)9598_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9593,
            "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9597,
            "contract": "contracts/HonestConfiguration.sol:HonestConfiguration",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1614200",
      "executionCost": "1694",
      "totalCost": "1615894"
    },
    "external": {
      "DEFAULT_ADMIN_ROLE()": "287",
      "activateBasketAsset(address)": "infinite",
      "activeBasketAssets()": "infinite",
      "addBasketAsset(address,address)": "infinite",
      "assetManagerRole()": "1043",
      "basketAssetInvestmentIntegration(address)": "infinite",
      "basketAssets()": "infinite",
      "claimableRewardsPercentage()": "1089",
      "deactivateBasketAsset(address)": "infinite",
      "getRoleAdmin(bytes32)": "1180",
      "getRoleMember(bytes32,uint256)": "infinite",
      "getRoleMemberCount(bytes32)": "infinite",
      "governorRole()": "1087",
      "grantRole(bytes32,address)": "infinite",
      "hasRole(bytes32,address)": "infinite",
      "honestAsset()": "1105",
      "initialize(address,address[],address[],uint256,uint256,uint256)": "infinite",
      "redeemFeeRate()": "1087",
      "removeBasketAsset(address)": "infinite",
      "renounceRole(bytes32,address)": "infinite",
      "revokeRole(bytes32,address)": "infinite",
      "setClaimableRewardsPercentage(uint256)": "infinite",
      "setRedeemFeeRate(uint256)": "infinite",
      "setSwapFeeRate(uint256)": "infinite",
      "swapFeeRate()": "1066",
      "transferOwnership(address)": "infinite",
      "vaultRole()": "1086"
    }
  }
}